{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0","program":"C:\\Users\\Administrator\\.rustup\\toolchains\\stable-x86_64-pc-windows-gnu\\bin\\rls.exe","arguments":["--crate-name","nanorand","--edition=2021","C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"chacha\"","--cfg","feature=\"default\"","--cfg","feature=\"getrandom\"","--cfg","feature=\"pcg64\"","--cfg","feature=\"std\"","--cfg","feature=\"tls\"","--cfg","feature=\"wyrand\"","-C","metadata=f2858fa697feb4cf","-C","extra-filename=-f2858fa697feb4cf","--out-dir","d:\\gorepository\\Rust_learning\\learn_rust\\src\\rust_exec\\src\\snake\\target\\rls\\debug\\deps","-L","dependency=d:\\gorepository\\Rust_learning\\learn_rust\\src\\rust_exec\\src\\snake\\target\\rls\\debug\\deps","--extern","getrandom=d:\\gorepository\\Rust_learning\\learn_rust\\src\\rust_exec\\src\\snake\\target\\rls\\debug\\deps\\libgetrandom-2ced692be283d73d.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Administrator\\.rustup/toolchains/stable-x86_64-pc-windows-gnu"],"output":"d:\\gorepository\\Rust_learning\\learn_rust\\src\\rust_exec\\src\\snake\\target\\rls\\debug\\deps\\libnanorand-f2858fa697feb4cf.rmeta"},"prelude":{"crate_id":{"name":"nanorand","disambiguator":[13491142798638811336,0]},"crate_root":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src","external_crates":[{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[14055050308901652574,0]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","num":2,"id":{"name":"core","disambiguator":[5406660558723523310,0]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[6038961408070452265,0]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[6202505720861038248,0]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8289845166519128743,0]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[39020721113303181,0]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12376455831296353094,0]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[11449565758146872379,0]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[14009155214127162348,0]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[14302345610359121259,0]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[443988361779617849,0]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[1060626961105550716,0]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[10057676532539598168,0]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","num":14,"id":{"name":"gimli","disambiguator":[10097761641719977187,0]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","num":15,"id":{"name":"object","disambiguator":[15541071652604932095,0]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","num":16,"id":{"name":"memchr","disambiguator":[8355012413122137596,0]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[16122166454175645634,0]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\entropy.rs","num":18,"id":{"name":"getrandom","disambiguator":[1259507024853920736,0]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\entropy.rs","num":19,"id":{"name":"cfg_if","disambiguator":[7870163325803878118,0]}}],"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":0,"byte_end":6329,"line_start":1,"line_end":122,"column_start":1,"column_end":13}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":362},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":5828,"byte_end":5839,"line_start":103,"line_end":103,"column_start":17,"column_end":28},"alias_span":null,"name":"BufferedRng","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":5854,"byte_end":5855,"line_start":104,"line_end":104,"column_start":14,"column_end":15},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":5871,"byte_end":5872,"line_start":105,"line_end":105,"column_start":15,"column_end":16},"alias_span":null,"name":"*","value":"Rng","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":360},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":5911,"byte_end":5918,"line_start":107,"line_end":107,"column_start":14,"column_end":21},"alias_span":null,"name":"tls_rng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":267},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":24663,"byte_end":24669,"line_start":2,"line_end":2,"column_start":18,"column_end":24},"alias_span":null,"name":"ChaCha","value":"","parent":{"krate":0,"index":112}},{"kind":"Use","ref_id":{"krate":0,"index":263},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":24671,"byte_end":24679,"line_start":2,"line_end":2,"column_start":26,"column_end":34},"alias_span":null,"name":"ChaCha12","value":"","parent":{"krate":0,"index":112}},{"kind":"Use","ref_id":{"krate":0,"index":265},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":24681,"byte_end":24689,"line_start":2,"line_end":2,"column_start":36,"column_end":44},"alias_span":null,"name":"ChaCha20","value":"","parent":{"krate":0,"index":112}},{"kind":"Use","ref_id":{"krate":0,"index":261},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":24691,"byte_end":24698,"line_start":2,"line_end":2,"column_start":46,"column_end":53},"alias_span":null,"name":"ChaCha8","value":"","parent":{"krate":0,"index":112}},{"kind":"Use","ref_id":{"krate":0,"index":208},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":24742,"byte_end":24747,"line_start":4,"line_end":4,"column_start":16,"column_end":21},"alias_span":null,"name":"Pcg64","value":"","parent":{"krate":0,"index":112}},{"kind":"Use","ref_id":{"krate":0,"index":163},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":24792,"byte_end":24798,"line_start":6,"line_end":6,"column_start":17,"column_end":23},"alias_span":null,"name":"WyRand","value":"","parent":{"krate":0,"index":112}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":0,"byte_end":6329,"line_start":1,"line_end":122,"column_start":1,"column_end":13},"name":"","qualname":"::","value":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":56},{"krate":0,"index":74},{"krate":0,"index":78},{"krate":0,"index":112},{"krate":0,"index":333}],"decl_id":null,"docs":" A library meant for fast, random number generation with quick compile time, and minimal dependencies.","sig":null,"attributes":[{"value":"forbid(missing_docs)","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":43,"byte_end":67,"line_start":2,"line_end":2,"column_start":1,"column_end":25}},{"value":"warn(clippy :: perf, clippy :: complexity, clippy :: style, clippy ::\n       correctness, clippy :: missing_const_for_fn)","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":68,"byte_end":183,"line_start":3,"line_end":9,"column_start":1,"column_end":3}},{"value":"/ A library meant for fast, random number generation with quick compile time, and minimal dependencies.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":185,"byte_end":290,"line_start":11,"line_end":11,"column_start":1,"column_end":106}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":291,"byte_end":294,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":295,"byte_end":309,"line_start":13,"line_end":13,"column_start":1,"column_end":15}},{"value":"/ ## Generating a number with an initialized RNG","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":310,"byte_end":360,"line_start":14,"line_end":14,"column_start":1,"column_end":51}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":361,"byte_end":372,"line_start":15,"line_end":15,"column_start":1,"column_end":12}},{"value":"/ use nanorand::{Rng, WyRand};","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":373,"byte_end":405,"line_start":16,"line_end":16,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":406,"byte_end":409,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ let mut rng = WyRand::new();","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":410,"byte_end":442,"line_start":18,"line_end":18,"column_start":1,"column_end":33}},{"value":"/ println!(\"Random number: {}\", rng.generate::<u64>());","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":443,"byte_end":500,"line_start":19,"line_end":19,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":501,"byte_end":508,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/ ## Generating a number with a thread-local RNG","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":509,"byte_end":559,"line_start":21,"line_end":21,"column_start":1,"column_end":51}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":560,"byte_end":571,"line_start":22,"line_end":22,"column_start":1,"column_end":12}},{"value":"/ use nanorand::Rng;","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":572,"byte_end":594,"line_start":23,"line_end":23,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":595,"byte_end":598,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ let mut rng = nanorand::tls_rng();","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":599,"byte_end":637,"line_start":25,"line_end":25,"column_start":1,"column_end":39}},{"value":"/ println!(\"Random number: {}\", rng.generate::<u64>());","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":638,"byte_end":695,"line_start":26,"line_end":26,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":696,"byte_end":703,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ ## Generating a number in a range","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":704,"byte_end":741,"line_start":28,"line_end":28,"column_start":1,"column_end":38}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":742,"byte_end":753,"line_start":29,"line_end":29,"column_start":1,"column_end":12}},{"value":"/ use nanorand::{Rng, WyRand};","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":754,"byte_end":786,"line_start":30,"line_end":30,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":787,"byte_end":790,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ let mut rng = WyRand::new();","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":791,"byte_end":823,"line_start":32,"line_end":32,"column_start":1,"column_end":33}},{"value":"/ println!(\"Random number between 1 and 100: {}\", rng.generate_range(1_u64..=100));","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":824,"byte_end":909,"line_start":33,"line_end":33,"column_start":1,"column_end":86}},{"value":"/ println!(\"Random number between -100 and 50: {}\", rng.generate_range(-100_i64..=50));","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":910,"byte_end":999,"line_start":34,"line_end":34,"column_start":1,"column_end":90}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":1000,"byte_end":1007,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/ ### Buffering random bytes","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":1008,"byte_end":1038,"line_start":36,"line_end":36,"column_start":1,"column_end":31}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":1039,"byte_end":1050,"line_start":37,"line_end":37,"column_start":1,"column_end":12}},{"value":"/ use nanorand::{Rng, BufferedRng, WyRand};","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":1051,"byte_end":1096,"line_start":38,"line_end":38,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":1097,"byte_end":1100,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ let mut thingy = [0u8; 5];","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":1101,"byte_end":1131,"line_start":40,"line_end":40,"column_start":1,"column_end":31}},{"value":"/ let mut rng = BufferedRng::new(WyRand::new());","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":1132,"byte_end":1182,"line_start":41,"line_end":41,"column_start":1,"column_end":51}},{"value":"/ rng.fill(&mut thingy);","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":1183,"byte_end":1209,"line_start":42,"line_end":42,"column_start":1,"column_end":27}},{"value":"/ // As WyRand generates 8 bytes of output, and our target is only 5 bytes,","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":1210,"byte_end":1287,"line_start":43,"line_end":43,"column_start":1,"column_end":78}},{"value":"/ // 3 bytes will remain in the buffer.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":1288,"byte_end":1329,"line_start":44,"line_end":44,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(rng.buffered(), 3);","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":1330,"byte_end":1364,"line_start":45,"line_end":45,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":1365,"byte_end":1372,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ ## Shuffling a Vec","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":1373,"byte_end":1395,"line_start":47,"line_end":47,"column_start":1,"column_end":23}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":1396,"byte_end":1407,"line_start":48,"line_end":48,"column_start":1,"column_end":12}},{"value":"/ use nanorand::{Rng, WyRand};","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":1408,"byte_end":1440,"line_start":49,"line_end":49,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":1441,"byte_end":1444,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ let mut rng = WyRand::new();","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":1445,"byte_end":1477,"line_start":51,"line_end":51,"column_start":1,"column_end":33}},{"value":"/ let mut items = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10];","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":1478,"byte_end":1534,"line_start":52,"line_end":52,"column_start":1,"column_end":57}},{"value":"/ rng.shuffle(&mut items);","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":1535,"byte_end":1563,"line_start":53,"line_end":53,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":1564,"byte_end":1571,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":1572,"byte_end":1575,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ ## Why should I use this over...","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":1576,"byte_end":1612,"line_start":56,"line_end":56,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":1613,"byte_end":1616,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ * `rand` - The standard rand crate is a complex beast. It contains unsafe code in the core implementations, and while it has much more options than we do, that's kind of the point. We're straight to the point, while rand is everything and the kitchen sink.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":1617,"byte_end":1877,"line_start":58,"line_end":58,"column_start":1,"column_end":261}},{"value":"/ * `fastrand`, `oorandom`, `random-fast-rng`, or `randomize` - These are all minimal, zero-dep implementations of the PCG family of RNGs (Pcg32 and Pcg64). While these are decent, they are _much_ slower than wyrand (which beats the speed of these Pcg32 implementations while providing 64 random bits), and do not provide CSPRNGs.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":1878,"byte_end":2210,"line_start":59,"line_end":59,"column_start":1,"column_end":333}},{"value":"/ * `getrandom` - The getrandom crate just provides OS entropy sources. It is not meant for random number generation. In fact, we provide it as an optional entropy source.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":2211,"byte_end":2384,"line_start":60,"line_end":60,"column_start":1,"column_end":174}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":2385,"byte_end":2388,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ ## RNG Implementations","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":2389,"byte_end":2415,"line_start":62,"line_end":62,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":2416,"byte_end":2419,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ **RNG**|**nanorand type**|**Output Size**|**Cryptographically Secure**|**Speed**<sup>1</sup>|**Notes**|**Original Implementation**","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":2420,"byte_end":2554,"line_start":64,"line_end":64,"column_start":1,"column_end":135}},{"value":"/ :-----:|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":2555,"byte_end":2614,"line_start":65,"line_end":65,"column_start":1,"column_end":60}},{"value":"/ wyrand|[`nanorand::WyRand`](rand/wyrand/struct.WyRand.html), [`nanorand::tls::TlsWyRand`](tls/fn.tls_rng.html)|64 bits (`u64`)|🚫|16.4 GB/s||[https://github.com/lemire/testingRNG/blob/master/source/wyrand.h](https://github.com/lemire/testingRNG/blob/master/source/wyrand.h)","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":2615,"byte_end":2894,"line_start":66,"line_end":66,"column_start":1,"column_end":277}},{"value":"/ Pcg64|[`nanorand::Pcg64`](rand/pcg64/struct.Pcg64.html)|64 bits (`u64`)|🚫|1.6 GB/s||[https://github.com/rkern/pcg64](https://github.com/rkern/pcg64)","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":2895,"byte_end":3050,"line_start":67,"line_end":67,"column_start":1,"column_end":153}},{"value":"/ ChaCha|[`nanorand::ChaCha`](rand/chacha/struct.ChaCha.html)|512 bits (`[u32; 16]`)|✅|204 MB/s (ChaCha8), 79 MB/s (ChaCha20)|Only works in Rust 1.47 or above|[https://cr.yp.to/chacha.html](https://cr.yp.to/chacha.html)","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":3051,"byte_end":3274,"line_start":68,"line_end":68,"column_start":1,"column_end":222}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":3275,"byte_end":3278,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ <sup>1. Speed benchmarked on an M1 Macbook Air</sup>","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":3279,"byte_end":3335,"line_start":70,"line_end":70,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":3336,"byte_end":3339,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ ## Entropy Sources","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":3340,"byte_end":3362,"line_start":72,"line_end":72,"column_start":1,"column_end":23}},{"value":"/ _Listed in order of priority_","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":3363,"byte_end":3396,"line_start":73,"line_end":73,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":3397,"byte_end":3400,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ * If the `getrandom` feature is enabled, then [`getrandom::getrandom`](https://docs.rs/getrandom/*/getrandom/fn.getrandom.html) will be called, and no other entropy sources will be used.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":3401,"byte_end":3591,"line_start":75,"line_end":75,"column_start":1,"column_end":191}},{"value":"/ * If the `rdseed` feature is enabled, and is running on an x86(-64) system with the [RDSEED](https://en.wikipedia.org/wiki/RDRAND) instruction, then","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":3592,"byte_end":3744,"line_start":76,"line_end":76,"column_start":1,"column_end":153}},{"value":"/   we will attempt to source as much entropy as possible via our [`rdseed_entropy`](entropy::rdseed_entropy) function","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":3745,"byte_end":3865,"line_start":77,"line_end":77,"column_start":1,"column_end":121}},{"value":"/ * Linux and Android will attempt to use the [`getrandom`](https://man7.org/linux/man-pages/man2/getrandom.2.html) syscall.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":3866,"byte_end":3992,"line_start":78,"line_end":78,"column_start":1,"column_end":127}},{"value":"/ * macOS and iOS (Darwin-based systems) will use Security.framework's [`SecRandomCopyBytes`](https://developer.apple.com/documentation/security/1399291-secrandomcopybytes).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":3993,"byte_end":4168,"line_start":79,"line_end":79,"column_start":1,"column_end":176}},{"value":"/ * Windows","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":4169,"byte_end":4182,"line_start":80,"line_end":80,"column_start":1,"column_end":14}},{"value":"/   * If we're targeting UWP, then the [`BCryptGenRandom`](https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/nf-bcrypt-bcryptgenrandom) is used with system-preferred RNG (`BCRYPT_USE_SYSTEM_PREFERRED_RNG`).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":4183,"byte_end":4399,"line_start":81,"line_end":81,"column_start":1,"column_end":217}},{"value":"/   * Otherwise, we'll use [`RtlGenRandom`](https://docs.microsoft.com/en-us/windows/win32/api/ntsecapi/nf-ntsecapi-rtlgenrandom).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":4400,"byte_end":4532,"line_start":82,"line_end":82,"column_start":1,"column_end":133}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":4533,"byte_end":4536,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ ## Feature Flags","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":4537,"byte_end":4557,"line_start":84,"line_end":84,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":4558,"byte_end":4561,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ * `alloc` (default) - Enables Rust `alloc` lib features, such as a buffering Rng wrapper.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":4562,"byte_end":4655,"line_start":86,"line_end":86,"column_start":1,"column_end":94}},{"value":"/ * `std` (default) - Enables Rust `std` lib features, such as seeding from OS entropy sources. Requires `alloc` to be enabled.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":4656,"byte_end":4785,"line_start":87,"line_end":87,"column_start":1,"column_end":130}},{"value":"/ * `tls` (default) - Enables a thread-local [`WyRand`](rand/wyrand/struct.WyRand.html) RNG (see below). Requires `std` to be enabled.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":4786,"byte_end":4922,"line_start":88,"line_end":88,"column_start":1,"column_end":137}},{"value":"/ * `wyrand` (default) - Enable the [`WyRand`](rand/wyrand/struct.WyRand.html) RNG.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":4923,"byte_end":5008,"line_start":89,"line_end":89,"column_start":1,"column_end":86}},{"value":"/ * `pcg64` (default) - Enable the [`Pcg64`](rand/pcg64/struct.Pcg64.html)  RNG.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":5009,"byte_end":5091,"line_start":90,"line_end":90,"column_start":1,"column_end":83}},{"value":"/ * `chacha` - Enable the [`ChaCha`](rand/chacha/struct.ChaCha.html) RNG. Requires Rust 1.47 or later.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":5092,"byte_end":5196,"line_start":91,"line_end":91,"column_start":1,"column_end":105}},{"value":"/ * `rdseed` - On x86 and x86-64 platforms, the `rdseed` intrinsic will be used when OS entropy isn't available.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":5197,"byte_end":5311,"line_start":92,"line_end":92,"column_start":1,"column_end":115}},{"value":"/ * `zeroize` - Implement the [Zeroize](https://crates.io/crates/zeroize) trait for all RNGs.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":5312,"byte_end":5407,"line_start":93,"line_end":93,"column_start":1,"column_end":96}},{"value":"/ * `getrandom` - Use the [`getrandom`](https://crates.io/crates/getrandom) crate as an entropy source. Works on most systems, optional due to the fact that it brings in more dependencies.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":5408,"byte_end":5598,"line_start":94,"line_end":94,"column_start":1,"column_end":191}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":5599,"byte_end":5602,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ ## MSRV","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":5603,"byte_end":5614,"line_start":96,"line_end":96,"column_start":1,"column_end":12}},{"value":"/ The minimum supported Rust version for the latest version of nanorand is **Rust 1.56.0**, released October 21st, 2021.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":5615,"byte_end":5737,"line_start":97,"line_end":97,"column_start":1,"column_end":123}}]},{"kind":"Mod","id":{"krate":0,"index":12},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"buffer","qualname":"::buffer","value":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","parent":null,"children":[{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":362},{"krate":0,"index":367},{"krate":0,"index":26},{"krate":0,"index":32},{"krate":0,"index":40},{"krate":0,"index":46},{"krate":0,"index":52}],"decl_id":null,"docs":" Provides a buffered wrapper for RNGs, preventing bits from being wasted.\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":5921,"byte_end":5946,"line_start":109,"line_end":109,"column_start":1,"column_end":26}},{"value":"/ Provides a buffered wrapper for RNGs, preventing bits from being wasted.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":5947,"byte_end":6023,"line_start":110,"line_end":110,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":362},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","byte_start":6990,"byte_end":7001,"line_start":20,"line_end":20,"column_start":12,"column_end":23},"name":"BufferedRng","qualname":"::buffer::BufferedRng","value":"BufferedRng {  }","parent":null,"children":[{"krate":0,"index":365},{"krate":0,"index":366}],"decl_id":null,"docs":" A buffered wrapper for any [Rng] implementation.\n It will keep unused bytes from the last call to [`Rng::rand`], and use them\n for subsequent randomness if needed, rather than throwing them away.","sig":null,"attributes":[{"value":"/ A buffered wrapper for any [Rng] implementation.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","byte_start":6418,"byte_end":6470,"line_start":5,"line_end":5,"column_start":1,"column_end":53}},{"value":"/ It will keep unused bytes from the last call to [`Rng::rand`], and use them","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","byte_start":6471,"byte_end":6550,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ for subsequent randomness if needed, rather than throwing them away.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","byte_start":6551,"byte_end":6623,"line_start":7,"line_end":7,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","byte_start":6624,"byte_end":6627,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","byte_start":6628,"byte_end":6639,"line_start":9,"line_end":9,"column_start":1,"column_end":12}},{"value":"/ use nanorand::{Rng, BufferedRng, WyRand};","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","byte_start":6640,"byte_end":6685,"line_start":10,"line_end":10,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","byte_start":6686,"byte_end":6689,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ let mut thingy = [0u8; 5];","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","byte_start":6690,"byte_end":6720,"line_start":12,"line_end":12,"column_start":1,"column_end":31}},{"value":"/ let mut rng = BufferedRng::new(WyRand::new());","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","byte_start":6721,"byte_end":6771,"line_start":13,"line_end":13,"column_start":1,"column_end":51}},{"value":"/ rng.fill(&mut thingy);","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","byte_start":6772,"byte_end":6798,"line_start":14,"line_end":14,"column_start":1,"column_end":27}},{"value":"/ // As WyRand generates 8 bytes of output, and our target is only 5 bytes,","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","byte_start":6799,"byte_end":6876,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/ // 3 bytes will remain in the buffer.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","byte_start":6877,"byte_end":6918,"line_start":16,"line_end":16,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(rng.buffered(), 3);","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","byte_start":6919,"byte_end":6953,"line_start":17,"line_end":17,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","byte_start":6954,"byte_end":6961,"line_start":18,"line_end":18,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","byte_start":7280,"byte_end":7283,"line_start":27,"line_end":27,"column_start":9,"column_end":12},"name":"new","qualname":"<BufferedRng<InternalGenerator, OUTPUT>>::new","value":"pub fn new(InternalGenerator) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps a [`Rng`] InternalGenerator in a [`BufferedRng`] instance.\n","sig":null,"attributes":[{"value":"/ Wraps a [`Rng`] InternalGenerator in a [`BufferedRng`] instance.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","byte_start":7203,"byte_end":7271,"line_start":26,"line_end":26,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","byte_start":7426,"byte_end":7436,"line_start":35,"line_end":35,"column_start":9,"column_end":19},"name":"into_inner","qualname":"<BufferedRng<InternalGenerator, OUTPUT>>::into_inner","value":"pub fn into_inner(Self) -> InternalGenerator","parent":null,"children":[],"decl_id":null,"docs":" Returns the internal RNG, dropping the buffer.\n","sig":null,"attributes":[{"value":"/ Returns the internal RNG, dropping the buffer.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","byte_start":7367,"byte_end":7417,"line_start":34,"line_end":34,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","byte_start":7548,"byte_end":7556,"line_start":40,"line_end":40,"column_start":9,"column_end":17},"name":"buffered","qualname":"<BufferedRng<InternalGenerator, OUTPUT>>::buffered","value":"pub fn buffered(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns how many unused bytes are currently buffered.\n","sig":null,"attributes":[{"value":"/ Returns how many unused bytes are currently buffered.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","byte_start":7482,"byte_end":7539,"line_start":39,"line_end":39,"column_start":2,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":56},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\crypto.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"crypto","qualname":"::crypto","value":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\crypto.rs","parent":null,"children":[{"krate":0,"index":57}],"decl_id":null,"docs":" Implementation of cryptography, for CSPRNGs.\n","sig":null,"attributes":[{"value":"/ Implementation of cryptography, for CSPRNGs.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":6040,"byte_end":6088,"line_start":112,"line_end":112,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":57},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\crypto\\chacha.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"chacha","qualname":"::crypto::chacha","value":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\crypto\\chacha.rs","parent":null,"children":[{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":67},{"krate":0,"index":72}],"decl_id":null,"docs":" Implementation of the ChaCha cryptographic primitives.  \n More details can be seen at https://en.wikipedia.org/wiki/Salsa20\n","sig":null,"attributes":[{"value":"/ Implementation of the ChaCha cryptographic primitives.  ","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\crypto.rs","byte_start":9529,"byte_end":9589,"line_start":1,"line_end":1,"column_start":1,"column_end":61}},{"value":"/ More details can be seen at https://en.wikipedia.org/wiki/Salsa20","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\crypto.rs","byte_start":9590,"byte_end":9659,"line_start":2,"line_end":2,"column_start":1,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\crypto\\chacha.rs","byte_start":10494,"byte_end":10506,"line_start":29,"line_end":29,"column_start":8,"column_end":20},"name":"chacha_block","qualname":"::crypto::chacha::chacha_block","value":"pub fn chacha_block<const ROUNDS: u8>([u32; ]) -> [u32; ]","parent":null,"children":[],"decl_id":null,"docs":" Do one ChaCha round on the input data.\n","sig":null,"attributes":[{"value":"/ Do one ChaCha round on the input data.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\crypto\\chacha.rs","byte_start":10444,"byte_end":10486,"line_start":28,"line_end":28,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\crypto\\chacha.rs","byte_start":11261,"byte_end":11272,"line_start":51,"line_end":51,"column_start":14,"column_end":25},"name":"chacha_init","qualname":"::crypto::chacha::chacha_init","value":"pub const fn chacha_init([u8; ], [u8; ]) -> [u32; ]","parent":null,"children":[],"decl_id":null,"docs":" Initialize the ChaCha internal state, with a 256-bit key and 64-bit nonce.\n","sig":null,"attributes":[{"value":"/ Initialize the ChaCha internal state, with a 256-bit key and 64-bit nonce.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\crypto\\chacha.rs","byte_start":11169,"byte_end":11247,"line_start":50,"line_end":50,"column_start":1,"column_end":79}}]},{"kind":"Function","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\crypto\\chacha.rs","byte_start":12067,"byte_end":12091,"line_start":78,"line_end":78,"column_start":8,"column_end":32},"name":"chacha_increment_counter","qualname":"::crypto::chacha::chacha_increment_counter","value":"pub fn chacha_increment_counter(&mut [u32; ]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Increment the 64-bit counter of the internal ChaCha20 state by 1.\n Returns `false` if it overflows, `true` otherwise.\n","sig":null,"attributes":[{"value":"/ Increment the 64-bit counter of the internal ChaCha20 state by 1.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\crypto\\chacha.rs","byte_start":11935,"byte_end":12004,"line_start":76,"line_end":76,"column_start":1,"column_end":70}},{"value":"/ Returns `false` if it overflows, `true` otherwise.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\crypto\\chacha.rs","byte_start":12005,"byte_end":12059,"line_start":77,"line_end":77,"column_start":1,"column_end":55}}]},{"kind":"Mod","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\entropy.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"entropy","qualname":"::entropy","value":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\entropy.rs","parent":null,"children":[{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77}],"decl_id":null,"docs":" Sources for obtaining entropy.\n","sig":null,"attributes":[{"value":"/ Sources for obtaining entropy.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":6105,"byte_end":6139,"line_start":114,"line_end":114,"column_start":1,"column_end":35}}]},{"kind":"Function","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\entropy.rs","byte_start":16260,"byte_end":16266,"line_start":35,"line_end":35,"column_start":8,"column_end":14},"name":"system","qualname":"::entropy::system","value":"pub fn system(&mut [u8])","parent":null,"children":[],"decl_id":null,"docs":" Pull in system entropy using the [`getrandom`](https://crates.io/crates/getrandom) crate.\n Uses backup entropy (rdseed and system time) if it fails.\n","sig":null,"attributes":[{"value":"cfg(feature = \"getrandom\")","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\entropy.rs","byte_start":16067,"byte_end":16096,"line_start":32,"line_end":32,"column_start":1,"column_end":30}},{"value":"/ Pull in system entropy using the [`getrandom`](https://crates.io/crates/getrandom) crate.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\entropy.rs","byte_start":16097,"byte_end":16190,"line_start":33,"line_end":33,"column_start":1,"column_end":94}},{"value":"/ Uses backup entropy (rdseed and system time) if it fails.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\entropy.rs","byte_start":16191,"byte_end":16252,"line_start":34,"line_end":34,"column_start":1,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\entropy.rs","byte_start":18103,"byte_end":18109,"line_start":103,"line_end":103,"column_start":8,"column_end":14},"name":"rdseed","qualname":"::entropy::rdseed","value":"pub fn rdseed(&mut [u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" A wrapper function for non-x86(64) platforms that do not have rdseed.\n","sig":null,"attributes":[{"value":"/ A wrapper function for non-x86(64) platforms that do not have rdseed.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\entropy.rs","byte_start":17926,"byte_end":17999,"line_start":98,"line_end":98,"column_start":1,"column_end":74}},{"value":"cfg(any(not(feature = \"rdseed\"),\n          not(any(target_arch = \"x86\", target_arch = \"x86_64\"))))","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\entropy.rs","byte_start":18000,"byte_end":18095,"line_start":99,"line_end":102,"column_start":1,"column_end":4}}]},{"kind":"Function","id":{"krate":0,"index":77},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\entropy.rs","byte_start":18438,"byte_end":18444,"line_start":115,"line_end":115,"column_start":8,"column_end":14},"name":"backup","qualname":"::entropy::backup","value":"pub fn backup(&mut [u8])","parent":null,"children":[],"decl_id":null,"docs":" A backup entropy source, trying rdseed first,\n and if it fails or does not complete, combining it with or\n using system time-based entropy generation.","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\entropy.rs","byte_start":18155,"byte_end":18178,"line_start":107,"line_end":107,"column_start":1,"column_end":24}},{"value":"/ A backup entropy source, trying rdseed first,","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\entropy.rs","byte_start":18179,"byte_end":18228,"line_start":108,"line_end":108,"column_start":1,"column_end":50}},{"value":"/ and if it fails or does not complete, combining it with or","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\entropy.rs","byte_start":18229,"byte_end":18291,"line_start":109,"line_end":109,"column_start":1,"column_end":63}},{"value":"/ using system time-based entropy generation.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\entropy.rs","byte_start":18292,"byte_end":18339,"line_start":110,"line_end":110,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\entropy.rs","byte_start":18340,"byte_end":18343,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\entropy.rs","byte_start":18344,"byte_end":18356,"line_start":112,"line_end":112,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\entropy.rs","byte_start":18357,"byte_end":18360,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ This function panics if sufficient entropy could not be obtained.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\entropy.rs","byte_start":18361,"byte_end":18430,"line_start":114,"line_end":114,"column_start":1,"column_end":70}}]},{"kind":"Mod","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\gen.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"gen","qualname":"::gen","value":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\gen.rs","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":86},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":95},{"krate":0,"index":100},{"krate":0,"index":104},{"krate":0,"index":108},{"krate":0,"index":373},{"krate":0,"index":378},{"krate":0,"index":383},{"krate":0,"index":388},{"krate":0,"index":393},{"krate":0,"index":398},{"krate":0,"index":403},{"krate":0,"index":408},{"krate":0,"index":413},{"krate":0,"index":418},{"krate":0,"index":423},{"krate":0,"index":428},{"krate":0,"index":433},{"krate":0,"index":439},{"krate":0,"index":444},{"krate":0,"index":450},{"krate":0,"index":455},{"krate":0,"index":461},{"krate":0,"index":466},{"krate":0,"index":472},{"krate":0,"index":477},{"krate":0,"index":483}],"decl_id":null,"docs":" Traits for generating types from an RNG.\n","sig":null,"attributes":[{"value":"/ Traits for generating types from an RNG.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":6157,"byte_end":6201,"line_start":116,"line_end":116,"column_start":1,"column_end":45}}]},{"kind":"Trait","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\gen.rs","byte_start":21317,"byte_end":21326,"line_start":72,"line_end":72,"column_start":11,"column_end":20},"name":"RandomGen","qualname":"::gen::RandomGen","value":"RandomGen<Generator: Rng<>, const OUTPUT: usize>","parent":null,"children":[{"krate":0,"index":94}],"decl_id":null,"docs":" A trait used for generating a random object with an RNG,\n","sig":null,"attributes":[{"value":"/ A trait used for generating a random object with an RNG,","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\gen.rs","byte_start":21246,"byte_end":21306,"line_start":71,"line_end":71,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\gen.rs","byte_start":21467,"byte_end":21473,"line_start":74,"line_end":74,"column_start":5,"column_end":11},"name":"random","qualname":"::gen::RandomGen::random","value":"pub fn random(&mut Generator) -> Self","parent":{"krate":0,"index":91},"children":[],"decl_id":null,"docs":" Return a random instance of the implementing type, from the specified RNG instance.\n","sig":null,"attributes":[{"value":"/ Return a random instance of the implementing type, from the specified RNG instance.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\gen.rs","byte_start":21375,"byte_end":21462,"line_start":73,"line_end":73,"column_start":2,"column_end":89}}]},{"kind":"Trait","id":{"krate":0,"index":95},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\gen.rs","byte_start":21594,"byte_end":21605,"line_start":78,"line_end":78,"column_start":11,"column_end":22},"name":"RandomRange","qualname":"::gen::RandomRange","value":"RandomRange<Generator: Rng<>, const OUTPUT: usize>: RandomGen<Generator, >","parent":null,"children":[{"krate":0,"index":98}],"decl_id":null,"docs":" A trait used for generating a random number within a range, with an RNG,\n","sig":null,"attributes":[{"value":"/ A trait used for generating a random number within a range, with an RNG,","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\gen.rs","byte_start":21507,"byte_end":21583,"line_start":77,"line_end":77,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\gen.rs","byte_start":21889,"byte_end":21901,"line_start":85,"line_end":85,"column_start":5,"column_end":17},"name":"random_range","qualname":"::gen::RandomRange::random_range","value":"pub fn random_range<Bounds: RangeBounds<Self>>(&mut Generator, Bounds) -> Self","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Return a ranged number of the implementing type, from the specified RNG instance.","sig":null,"attributes":[{"value":"/ Return a ranged number of the implementing type, from the specified RNG instance.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\gen.rs","byte_start":21685,"byte_end":21770,"line_start":81,"line_end":81,"column_start":2,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\gen.rs","byte_start":21772,"byte_end":21775,"line_start":82,"line_end":82,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\gen.rs","byte_start":21777,"byte_end":21789,"line_start":83,"line_end":83,"column_start":2,"column_end":14}},{"value":"/ This function will panic if the lower bound of the range is greater than the upper bound.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\gen.rs","byte_start":21791,"byte_end":21884,"line_start":84,"line_end":84,"column_start":2,"column_end":95}}]},{"kind":"Mod","id":{"krate":0,"index":112},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rand","qualname":"::rand","value":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","parent":null,"children":[{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":117},{"krate":0,"index":120},{"krate":0,"index":123},{"krate":0,"index":126},{"krate":0,"index":129},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":136},{"krate":0,"index":139},{"krate":0,"index":142},{"krate":0,"index":186},{"krate":0,"index":236},{"krate":0,"index":310},{"krate":0,"index":328}],"decl_id":null,"docs":" RNG algorithms.\n","sig":null,"attributes":[{"value":"/ RNG algorithms.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":6215,"byte_end":6234,"line_start":118,"line_end":118,"column_start":1,"column_end":20}}]},{"kind":"Mod","id":{"krate":0,"index":142},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\wyrand.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"wyrand","qualname":"::rand::wyrand","value":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\wyrand.rs","parent":null,"children":[{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":147},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":157},{"krate":0,"index":160},{"krate":0,"index":163},{"krate":0,"index":165},{"krate":0,"index":168},{"krate":0,"index":171},{"krate":0,"index":175},{"krate":0,"index":177},{"krate":0,"index":179},{"krate":0,"index":181}],"decl_id":null,"docs":" Implementation of the wyrand PRNG algorithm.\n More details can be seen at <https://github.com/wangyi-fudan/wyhash>\n","sig":null,"attributes":[{"value":"/ Implementation of the wyrand PRNG algorithm.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":24872,"byte_end":24920,"line_start":11,"line_end":11,"column_start":1,"column_end":49}},{"value":"/ More details can be seen at <https://github.com/wangyi-fudan/wyhash>","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":24921,"byte_end":24993,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"cfg(feature = \"wyrand\")","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":24994,"byte_end":25020,"line_start":13,"line_end":13,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":163},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\wyrand.rs","byte_start":27858,"byte_end":27864,"line_start":13,"line_end":13,"column_start":12,"column_end":18},"name":"WyRand","qualname":"::rand::wyrand::WyRand","value":"WyRand {  }","parent":null,"children":[{"krate":0,"index":164}],"decl_id":null,"docs":" An instance of the WyRand random number generator.\n Seeded from the system entropy generator when available.\n **This generator is _NOT_ cryptographically secure.**\n","sig":null,"attributes":[{"value":"/ An instance of the WyRand random number generator.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\wyrand.rs","byte_start":27575,"byte_end":27629,"line_start":8,"line_end":8,"column_start":1,"column_end":55}},{"value":"/ Seeded from the system entropy generator when available.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\wyrand.rs","byte_start":27630,"byte_end":27690,"line_start":9,"line_end":9,"column_start":1,"column_end":61}},{"value":"/ **This generator is _NOT_ cryptographically secure.**","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\wyrand.rs","byte_start":27691,"byte_end":27748,"line_start":10,"line_end":10,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\wyrand.rs","byte_start":28009,"byte_end":28012,"line_start":20,"line_end":20,"column_start":9,"column_end":12},"name":"new","qualname":"<WyRand>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new [`WyRand`] instance, seeding from the system's default source of entropy.\n","sig":null,"attributes":[{"value":"/ Create a new [`WyRand`] instance, seeding from the system's default source of entropy.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\wyrand.rs","byte_start":27897,"byte_end":27987,"line_start":18,"line_end":18,"column_start":2,"column_end":92}},{"value":"must_use","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\wyrand.rs","byte_start":27989,"byte_end":28000,"line_start":19,"line_end":19,"column_start":2,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\wyrand.rs","byte_start":28136,"byte_end":28144,"line_start":26,"line_end":26,"column_start":15,"column_end":23},"name":"new_seed","qualname":"<WyRand>::new_seed","value":"pub const fn new_seed(u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new [`WyRand`] instance, using a provided seed.\n","sig":null,"attributes":[{"value":"/ Create a new [`WyRand`] instance, using a provided seed.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\wyrand.rs","byte_start":28048,"byte_end":28108,"line_start":24,"line_end":24,"column_start":2,"column_end":62}},{"value":"must_use","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\wyrand.rs","byte_start":28110,"byte_end":28121,"line_start":25,"line_end":25,"column_start":2,"column_end":13}}]},{"kind":"Mod","id":{"krate":0,"index":186},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\pcg64.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pcg64","qualname":"::rand::pcg64","value":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\pcg64.rs","parent":null,"children":[{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":191},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":201},{"krate":0,"index":204},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":212},{"krate":0,"index":218},{"krate":0,"index":221},{"krate":0,"index":225},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":234}],"decl_id":null,"docs":" Implementation of the Pcg64 PRNG algorithm.\n More details can be seen at <https://www.pcg-random.org/index.html>\n","sig":null,"attributes":[{"value":"/ Implementation of the Pcg64 PRNG algorithm.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":25038,"byte_end":25085,"line_start":16,"line_end":16,"column_start":1,"column_end":48}},{"value":"/ More details can be seen at <https://www.pcg-random.org/index.html>","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":25086,"byte_end":25157,"line_start":17,"line_end":17,"column_start":1,"column_end":72}},{"value":"cfg(feature = \"pcg64\")","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":25158,"byte_end":25183,"line_start":18,"line_end":18,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":208},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\pcg64.rs","byte_start":29884,"byte_end":29889,"line_start":15,"line_end":15,"column_start":12,"column_end":17},"name":"Pcg64","qualname":"::rand::pcg64::Pcg64","value":"Pcg64 {  }","parent":null,"children":[{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211}],"decl_id":null,"docs":" An instance of the Pcg64 random number generator.\n Seeded from the system entropy generator when available.\n **This generator is _NOT_ cryptographically secure.**\n","sig":null,"attributes":[{"value":"/ An instance of the Pcg64 random number generator.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\pcg64.rs","byte_start":29602,"byte_end":29655,"line_start":10,"line_end":10,"column_start":1,"column_end":54}},{"value":"/ Seeded from the system entropy generator when available.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\pcg64.rs","byte_start":29656,"byte_end":29716,"line_start":11,"line_end":11,"column_start":1,"column_end":61}},{"value":"/ **This generator is _NOT_ cryptographically secure.**","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\pcg64.rs","byte_start":29717,"byte_end":29774,"line_start":12,"line_end":12,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\pcg64.rs","byte_start":30084,"byte_end":30087,"line_start":25,"line_end":25,"column_start":9,"column_end":12},"name":"new","qualname":"<Pcg64>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new [`Pcg64`] instance, seeding from the system's default source of entropy.\n","sig":null,"attributes":[{"value":"/ Create a new [`Pcg64`] instance, seeding from the system's default source of entropy.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\pcg64.rs","byte_start":29948,"byte_end":30037,"line_start":22,"line_end":22,"column_start":2,"column_end":91}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\pcg64.rs","byte_start":30039,"byte_end":30062,"line_start":23,"line_end":23,"column_start":2,"column_end":25}},{"value":"must_use","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\pcg64.rs","byte_start":30064,"byte_end":30075,"line_start":24,"line_end":24,"column_start":2,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\pcg64.rs","byte_start":30384,"byte_end":30392,"line_start":37,"line_end":37,"column_start":15,"column_end":23},"name":"new_seed","qualname":"<Pcg64>::new_seed","value":"pub const fn new_seed(u128) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new [`Pcg64`] instance, using a provided seed.\n","sig":null,"attributes":[{"value":"/ Create a new [`Pcg64`] instance, using a provided seed.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\pcg64.rs","byte_start":30297,"byte_end":30356,"line_start":35,"line_end":35,"column_start":2,"column_end":61}},{"value":"must_use","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\pcg64.rs","byte_start":30358,"byte_end":30369,"line_start":36,"line_end":36,"column_start":2,"column_end":13}}]},{"kind":"Mod","id":{"krate":0,"index":236},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\chacha.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"chacha","qualname":"::rand::chacha","value":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\chacha.rs","parent":null,"children":[{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":245},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":255},{"krate":0,"index":258},{"krate":0,"index":261},{"krate":0,"index":263},{"krate":0,"index":265},{"krate":0,"index":267},{"krate":0,"index":271},{"krate":0,"index":279},{"krate":0,"index":284},{"krate":0,"index":293},{"krate":0,"index":296},{"krate":0,"index":299},{"krate":0,"index":307}],"decl_id":null,"docs":" Implementation of the ChaCha CSPRNG algorithm.\n More details can be seen at <https://en.wikipedia.org/wiki/Salsa20>\n","sig":null,"attributes":[{"value":"/ Implementation of the ChaCha CSPRNG algorithm.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":25200,"byte_end":25250,"line_start":21,"line_end":21,"column_start":1,"column_end":51}},{"value":"/ More details can be seen at <https://en.wikipedia.org/wiki/Salsa20>","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":25251,"byte_end":25322,"line_start":22,"line_end":22,"column_start":1,"column_end":72}},{"value":"cfg(feature = \"chacha\")","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":25323,"byte_end":25349,"line_start":23,"line_end":23,"column_start":1,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":261},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\chacha.rs","byte_start":32240,"byte_end":32247,"line_start":10,"line_end":10,"column_start":10,"column_end":17},"name":"ChaCha8","qualname":"::rand::chacha::ChaCha8","value":"ChaCha<>","parent":null,"children":[],"decl_id":null,"docs":" The ChaCha CSPRNG, with 8 rounds.\n","sig":null,"attributes":[{"value":"/ The ChaCha CSPRNG, with 8 rounds.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\chacha.rs","byte_start":32193,"byte_end":32230,"line_start":9,"line_end":9,"column_start":1,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":263},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\chacha.rs","byte_start":32310,"byte_end":32318,"line_start":13,"line_end":13,"column_start":10,"column_end":18},"name":"ChaCha12","qualname":"::rand::chacha::ChaCha12","value":"ChaCha<>","parent":null,"children":[],"decl_id":null,"docs":" The ChaCha CSPRNG, with 12 rounds.\n","sig":null,"attributes":[{"value":"/ The ChaCha CSPRNG, with 12 rounds.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\chacha.rs","byte_start":32262,"byte_end":32300,"line_start":12,"line_end":12,"column_start":1,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":265},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\chacha.rs","byte_start":32382,"byte_end":32390,"line_start":16,"line_end":16,"column_start":10,"column_end":18},"name":"ChaCha20","qualname":"::rand::chacha::ChaCha20","value":"ChaCha<>","parent":null,"children":[],"decl_id":null,"docs":" The ChaCha CSPRNG, with 20 rounds.\n","sig":null,"attributes":[{"value":"/ The ChaCha CSPRNG, with 20 rounds.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\chacha.rs","byte_start":32334,"byte_end":32372,"line_start":15,"line_end":15,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":267},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\chacha.rs","byte_start":32699,"byte_end":32705,"line_start":23,"line_end":23,"column_start":12,"column_end":18},"name":"ChaCha","qualname":"::rand::chacha::ChaCha","value":"ChaCha {  }","parent":null,"children":[{"krate":0,"index":269}],"decl_id":null,"docs":" An instance of the ChaCha random number generator.\n Seeded from the system entropy generator when available.\n **This generator _is theoretically_ cryptographically secure.**\n","sig":null,"attributes":[{"value":"/ An instance of the ChaCha random number generator.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\chacha.rs","byte_start":32406,"byte_end":32460,"line_start":18,"line_end":18,"column_start":1,"column_end":55}},{"value":"/ Seeded from the system entropy generator when available.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\chacha.rs","byte_start":32461,"byte_end":32521,"line_start":19,"line_end":19,"column_start":1,"column_end":61}},{"value":"/ **This generator _is theoretically_ cryptographically secure.**","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\chacha.rs","byte_start":32522,"byte_end":32589,"line_start":20,"line_end":20,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\chacha.rs","byte_start":32901,"byte_end":32904,"line_start":30,"line_end":30,"column_start":9,"column_end":12},"name":"new","qualname":"<ChaCha<ROUNDS>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new [`ChaCha`] instance, seeding from the system's default source of entropy.\n","sig":null,"attributes":[{"value":"/ Create a new [`ChaCha`] instance, seeding from the system's default source of entropy.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\chacha.rs","byte_start":32789,"byte_end":32879,"line_start":28,"line_end":28,"column_start":2,"column_end":92}},{"value":"must_use","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\chacha.rs","byte_start":32881,"byte_end":32892,"line_start":29,"line_end":29,"column_start":2,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\chacha.rs","byte_start":33252,"byte_end":33259,"line_start":41,"line_end":41,"column_start":15,"column_end":22},"name":"new_key","qualname":"<ChaCha<ROUNDS>>::new_key","value":"pub const fn new_key([u8; ], [u8; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new [`ChaCha`] instance, using the provided key and nonce.\n","sig":null,"attributes":[{"value":"/ Create a new [`ChaCha`] instance, using the provided key and nonce.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\chacha.rs","byte_start":33153,"byte_end":33224,"line_start":39,"line_end":39,"column_start":2,"column_end":73}},{"value":"must_use","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\chacha.rs","byte_start":33226,"byte_end":33237,"line_start":40,"line_end":40,"column_start":2,"column_end":13}}]},{"kind":"Trait","id":{"krate":0,"index":310},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":25432,"byte_end":25435,"line_start":27,"line_end":27,"column_start":11,"column_end":14},"name":"Rng","qualname":"::rand::Rng","value":"Rng<const OUTPUT: usize>: Clone","parent":null,"children":[{"krate":0,"index":312},{"krate":0,"index":314},{"krate":0,"index":316},{"krate":0,"index":318},{"krate":0,"index":322},{"krate":0,"index":325}],"decl_id":null,"docs":" A trait that represents a random number generator.\n","sig":null,"attributes":[{"value":"/ A trait that represents a random number generator.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":25367,"byte_end":25421,"line_start":26,"line_end":26,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":25546,"byte_end":25550,"line_start":29,"line_end":29,"column_start":5,"column_end":9},"name":"rand","qualname":"::rand::Rng::rand","value":"pub fn rand(&mut Self) -> [u8; ]","parent":{"krate":0,"index":310},"children":[],"decl_id":null,"docs":" Generates a random sequence of bytes, seeding from the internal state.\n","sig":null,"attributes":[{"value":"/ Generates a random sequence of bytes, seeding from the internal state.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":25467,"byte_end":25541,"line_start":28,"line_end":28,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":25663,"byte_end":25671,"line_start":31,"line_end":31,"column_start":5,"column_end":13},"name":"generate","qualname":"::rand::Rng::generate","value":"pub fn generate<Generated>(&mut Self) -> Generated where\nGenerated: RandomGen<Self, >","parent":{"krate":0,"index":310},"children":[],"decl_id":null,"docs":" Generates a random of the specified type, seeding from the internal state.\n","sig":null,"attributes":[{"value":"/ Generates a random of the specified type, seeding from the internal state.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":25580,"byte_end":25658,"line_start":30,"line_end":30,"column_start":2,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":25833,"byte_end":25843,"line_start":38,"line_end":38,"column_start":5,"column_end":15},"name":"fill_bytes","qualname":"::rand::Rng::fill_bytes","value":"pub fn fill_bytes<Bytes>(&mut Self, Bytes) where Bytes: AsMut<[u8]>","parent":{"krate":0,"index":310},"children":[],"decl_id":null,"docs":" Fill an array of bytes with randomness.\n","sig":null,"attributes":[{"value":"/ Fill an array of bytes with randomness.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":25785,"byte_end":25828,"line_start":37,"line_end":37,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":26253,"byte_end":26257,"line_start":53,"line_end":53,"column_start":5,"column_end":9},"name":"fill","qualname":"::rand::Rng::fill","value":"pub fn fill<Contents, Array>(&mut Self, Array) where\nContents: RandomGen<Self, >, Array: AsMut<[Contents]>","parent":{"krate":0,"index":310},"children":[],"decl_id":null,"docs":" Fill an array with the specified type.\n","sig":null,"attributes":[{"value":"/ Fill an array with the specified type.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":26206,"byte_end":26248,"line_start":52,"line_end":52,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":26563,"byte_end":26577,"line_start":62,"line_end":62,"column_start":5,"column_end":19},"name":"generate_range","qualname":"::rand::Rng::generate_range","value":"pub fn generate_range<Number, Bounds>(&mut Self, Bounds) -> Number where\nNumber: RandomRange<Self, >, Bounds: RangeBounds<Number>","parent":{"krate":0,"index":310},"children":[],"decl_id":null,"docs":" Generates a random of the specified type, seeding from the internal state.\n","sig":null,"attributes":[{"value":"/ Generates a random of the specified type, seeding from the internal state.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":26480,"byte_end":26558,"line_start":61,"line_end":61,"column_start":2,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":26788,"byte_end":26795,"line_start":70,"line_end":70,"column_start":5,"column_end":12},"name":"shuffle","qualname":"::rand::Rng::shuffle","value":"pub fn shuffle<Contents, Array>(&mut Self, Array) where\nArray: AsMut<[Contents]>","parent":{"krate":0,"index":310},"children":[],"decl_id":null,"docs":" Shuffle a slice, using the RNG.\n","sig":null,"attributes":[{"value":"/ Shuffle a slice, using the RNG.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":26748,"byte_end":26783,"line_start":69,"line_end":69,"column_start":2,"column_end":37}}]},{"kind":"Trait","id":{"krate":0,"index":328},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":27162,"byte_end":27173,"line_start":84,"line_end":84,"column_start":11,"column_end":22},"name":"SeedableRng","qualname":"::rand::SeedableRng","value":"SeedableRng<const SEED_SIZE: usize, const OUTPUT: usize>: Rng<>","parent":null,"children":[{"krate":0,"index":331}],"decl_id":null,"docs":" A trait that represents an RNG that can be reseeded from arbitrary bytes.\n","sig":null,"attributes":[{"value":"/ A trait that represents an RNG that can be reseeded from arbitrary bytes.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":27074,"byte_end":27151,"line_start":83,"line_end":83,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":27285,"byte_end":27291,"line_start":86,"line_end":86,"column_start":5,"column_end":11},"name":"reseed","qualname":"::rand::SeedableRng::reseed","value":"pub fn reseed(&mut Self, [u8; ])","parent":{"krate":0,"index":328},"children":[],"decl_id":null,"docs":" Re-seed the RNG with the specified bytes.\n","sig":null,"attributes":[{"value":"/ Re-seed the RNG with the specified bytes.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":27235,"byte_end":27280,"line_start":85,"line_end":85,"column_start":2,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":333},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\tls.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tls","qualname":"::tls","value":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\tls.rs","parent":null,"children":[{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":338},{"krate":0,"index":341},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":348},{"krate":0,"index":488},{"krate":0,"index":492},{"krate":0,"index":495},{"krate":0,"index":351},{"krate":0,"index":355},{"krate":0,"index":360}],"decl_id":null,"docs":" Provides a thread-local [`WyRand`] RNG.\n","sig":null,"attributes":[{"value":"cfg(feature = \"tls\")","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":6249,"byte_end":6272,"line_start":120,"line_end":120,"column_start":1,"column_end":24}},{"value":"/ Provides a thread-local [`WyRand`] RNG.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":6273,"byte_end":6316,"line_start":121,"line_end":121,"column_start":1,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":492},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\tls.rs","byte_start":35472,"byte_end":35481,"line_start":10,"line_end":10,"column_start":12,"column_end":21},"name":"TlsWyRand","qualname":"::tls::TlsWyRand","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":360},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\tls.rs","byte_start":36195,"byte_end":36202,"line_start":40,"line_end":40,"column_start":8,"column_end":15},"name":"tls_rng","qualname":"::tls::tls_rng","value":"pub fn tls_rng() -> TlsWyRand","parent":null,"children":[],"decl_id":null,"docs":" Fetch a thread-local [`WyRand`]\n ```rust\n use nanorand::Rng;","sig":null,"attributes":[{"value":"/ Fetch a thread-local [`WyRand`]","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\tls.rs","byte_start":35721,"byte_end":35756,"line_start":24,"line_end":24,"column_start":1,"column_end":36}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\tls.rs","byte_start":35757,"byte_end":35768,"line_start":25,"line_end":25,"column_start":1,"column_end":12}},{"value":"/ use nanorand::Rng;","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\tls.rs","byte_start":35769,"byte_end":35791,"line_start":26,"line_end":26,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\tls.rs","byte_start":35792,"byte_end":35795,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ let mut rng = nanorand::tls_rng();","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\tls.rs","byte_start":35796,"byte_end":35834,"line_start":28,"line_end":28,"column_start":1,"column_end":39}},{"value":"/ println!(\"Random number: {}\", rng.generate::<u64>());","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\tls.rs","byte_start":35835,"byte_end":35892,"line_start":29,"line_end":29,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\tls.rs","byte_start":35893,"byte_end":35900,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/ This cannot be passed to another thread, as something like this will fail to compile:","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\tls.rs","byte_start":35901,"byte_end":35990,"line_start":31,"line_end":31,"column_start":1,"column_end":90}},{"value":"/ ```compile_fail","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\tls.rs","byte_start":35991,"byte_end":36010,"line_start":32,"line_end":32,"column_start":1,"column_end":20}},{"value":"/ use nanorand::Rng;","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\tls.rs","byte_start":36011,"byte_end":36033,"line_start":33,"line_end":33,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\tls.rs","byte_start":36034,"byte_end":36037,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ let mut rng = nanorand::tls_rng();","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\tls.rs","byte_start":36038,"byte_end":36076,"line_start":35,"line_end":35,"column_start":1,"column_end":39}},{"value":"/ std::thread::spawn(move || {","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\tls.rs","byte_start":36077,"byte_end":36109,"line_start":36,"line_end":36,"column_start":1,"column_end":33}},{"value":"/     println!(\"Random number: {}\", rng.generate::<u64>());","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\tls.rs","byte_start":36110,"byte_end":36171,"line_start":37,"line_end":37,"column_start":1,"column_end":62}},{"value":"/ });","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\tls.rs","byte_start":36172,"byte_end":36179,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\tls.rs","byte_start":36180,"byte_end":36187,"line_start":39,"line_end":39,"column_start":1,"column_end":8}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","byte_start":7161,"byte_end":7172,"line_start":25,"line_end":25,"column_start":59,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","byte_start":7676,"byte_end":7687,"line_start":46,"line_end":46,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","byte_start":8509,"byte_end":8520,"line_start":76,"line_end":76,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","byte_start":9106,"byte_end":9117,"line_start":97,"line_end":97,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","byte_start":9306,"byte_end":9317,"line_start":105,"line_end":105,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\wyrand.rs","byte_start":27887,"byte_end":27893,"line_start":17,"line_end":17,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":166},{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\wyrand.rs","byte_start":28205,"byte_end":28211,"line_start":31,"line_end":31,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\wyrand.rs","byte_start":28518,"byte_end":28524,"line_start":42,"line_end":42,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\wyrand.rs","byte_start":28796,"byte_end":28802,"line_start":51,"line_end":51,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\wyrand.rs","byte_start":28882,"byte_end":28888,"line_start":57,"line_end":57,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\wyrand.rs","byte_start":28998,"byte_end":29004,"line_start":63,"line_end":63,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\wyrand.rs","byte_start":29189,"byte_end":29195,"line_start":71,"line_end":71,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\pcg64.rs","byte_start":29939,"byte_end":29944,"line_start":21,"line_end":21,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\pcg64.rs","byte_start":30888,"byte_end":30893,"line_start":64,"line_end":64,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":219}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\pcg64.rs","byte_start":31225,"byte_end":31230,"line_start":77,"line_end":77,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\pcg64.rs","byte_start":31407,"byte_end":31412,"line_start":85,"line_end":85,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\pcg64.rs","byte_start":31517,"byte_end":31522,"line_start":91,"line_end":91,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":231}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\pcg64.rs","byte_start":31648,"byte_end":31653,"line_start":101,"line_end":101,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\pcg64.rs","byte_start":31762,"byte_end":31767,"line_start":107,"line_end":107,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":235}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\chacha.rs","byte_start":32771,"byte_end":32777,"line_start":27,"line_end":27,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":273},{"krate":0,"index":276}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\chacha.rs","byte_start":33406,"byte_end":33412,"line_start":47,"line_end":47,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\chacha.rs","byte_start":33719,"byte_end":33725,"line_start":58,"line_end":58,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":287}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\chacha.rs","byte_start":34427,"byte_end":34433,"line_start":81,"line_end":81,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\chacha.rs","byte_start":34541,"byte_end":34547,"line_start":87,"line_end":87,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":298}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\chacha.rs","byte_start":34716,"byte_end":34722,"line_start":93,"line_end":93,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":303}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\chacha.rs","byte_start":34991,"byte_end":34997,"line_start":103,"line_end":103,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\tls.rs","byte_start":35521,"byte_end":35530,"line_start":12,"line_end":12,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\tls.rs","byte_start":35628,"byte_end":35637,"line_start":18,"line_end":18,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":358}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":6032,"byte_end":6038,"line_start":111,"line_end":111,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":12}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":6097,"byte_end":6103,"line_start":113,"line_end":113,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":56}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\crypto.rs","byte_start":9668,"byte_end":9674,"line_start":3,"line_end":3,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":57}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":6148,"byte_end":6155,"line_start":115,"line_end":115,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":74}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":6210,"byte_end":6213,"line_start":117,"line_end":117,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":78}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":6243,"byte_end":6247,"line_start":119,"line_end":119,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":112}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":25029,"byte_end":25035,"line_start":14,"line_end":14,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":142}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":25192,"byte_end":25197,"line_start":19,"line_end":19,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":186}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":25358,"byte_end":25364,"line_start":24,"line_end":24,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":236}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\lib.rs","byte_start":6325,"byte_end":6328,"line_start":122,"line_end":122,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":333}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","byte_start":7161,"byte_end":7172,"line_start":25,"line_end":25,"column_start":59,"column_end":70},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":362},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","byte_start":7676,"byte_end":7687,"line_start":46,"line_end":46,"column_start":6,"column_end":17},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":362},"to":{"krate":0,"index":310}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","byte_start":8509,"byte_end":8520,"line_start":76,"line_end":76,"column_start":6,"column_end":17},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":362},"to":{"krate":1,"index":4305}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","byte_start":9106,"byte_end":9117,"line_start":97,"line_end":97,"column_start":39,"column_end":50},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":362},"to":{"krate":0,"index":328}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\buffer.rs","byte_start":9306,"byte_end":9317,"line_start":105,"line_end":105,"column_start":6,"column_end":17},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":362},"to":{"krate":2,"index":2982}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\gen.rs","byte_start":21653,"byte_end":21662,"line_start":79,"line_end":79,"column_start":2,"column_end":11},"kind":"SuperTrait","from":{"krate":0,"index":91},"to":{"krate":0,"index":95}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\wyrand.rs","byte_start":27887,"byte_end":27893,"line_start":17,"line_end":17,"column_start":6,"column_end":12},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":163},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\wyrand.rs","byte_start":28205,"byte_end":28211,"line_start":31,"line_end":31,"column_start":18,"column_end":24},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":163},"to":{"krate":2,"index":2982}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\wyrand.rs","byte_start":28518,"byte_end":28524,"line_start":42,"line_end":42,"column_start":17,"column_end":23},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":163},"to":{"krate":0,"index":310}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\wyrand.rs","byte_start":28796,"byte_end":28802,"line_start":51,"line_end":51,"column_start":16,"column_end":22},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":163},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\wyrand.rs","byte_start":28882,"byte_end":28888,"line_start":57,"line_end":57,"column_start":18,"column_end":24},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":163},"to":{"krate":2,"index":9357}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\wyrand.rs","byte_start":28998,"byte_end":29004,"line_start":63,"line_end":63,"column_start":16,"column_end":22},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":163},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\wyrand.rs","byte_start":29189,"byte_end":29195,"line_start":71,"line_end":71,"column_start":28,"column_end":34},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":163},"to":{"krate":0,"index":328}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\pcg64.rs","byte_start":29939,"byte_end":29944,"line_start":21,"line_end":21,"column_start":6,"column_end":11},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":208},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\pcg64.rs","byte_start":30888,"byte_end":30893,"line_start":64,"line_end":64,"column_start":18,"column_end":23},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":208},"to":{"krate":2,"index":2982}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\pcg64.rs","byte_start":31225,"byte_end":31230,"line_start":77,"line_end":77,"column_start":17,"column_end":22},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":208},"to":{"krate":0,"index":310}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\pcg64.rs","byte_start":31407,"byte_end":31412,"line_start":85,"line_end":85,"column_start":29,"column_end":34},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":208},"to":{"krate":0,"index":328}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\pcg64.rs","byte_start":31517,"byte_end":31522,"line_start":91,"line_end":91,"column_start":16,"column_end":21},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":208},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\pcg64.rs","byte_start":31648,"byte_end":31653,"line_start":101,"line_end":101,"column_start":18,"column_end":23},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":208},"to":{"krate":2,"index":9357}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\pcg64.rs","byte_start":31762,"byte_end":31767,"line_start":107,"line_end":107,"column_start":16,"column_end":21},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":208},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\chacha.rs","byte_start":32771,"byte_end":32777,"line_start":27,"line_end":27,"column_start":24,"column_end":30},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":267},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\chacha.rs","byte_start":33406,"byte_end":33412,"line_start":47,"line_end":47,"column_start":36,"column_end":42},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":267},"to":{"krate":2,"index":2982}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\chacha.rs","byte_start":33719,"byte_end":33725,"line_start":58,"line_end":58,"column_start":36,"column_end":42},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":267},"to":{"krate":0,"index":310}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\chacha.rs","byte_start":34427,"byte_end":34433,"line_start":81,"line_end":81,"column_start":34,"column_end":40},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":267},"to":{"krate":2,"index":2625}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\chacha.rs","byte_start":34541,"byte_end":34547,"line_start":87,"line_end":87,"column_start":36,"column_end":42},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":267},"to":{"krate":2,"index":9357}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\chacha.rs","byte_start":34716,"byte_end":34722,"line_start":93,"line_end":93,"column_start":48,"column_end":54},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":267},"to":{"krate":0,"index":328}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand\\chacha.rs","byte_start":34991,"byte_end":34997,"line_start":103,"line_end":103,"column_start":34,"column_end":40},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":267},"to":{"krate":2,"index":9350}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":25458,"byte_end":25463,"line_start":27,"line_end":27,"column_start":37,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":2625},"to":{"krate":0,"index":310}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\rand.rs","byte_start":27220,"byte_end":27223,"line_start":84,"line_end":84,"column_start":69,"column_end":72},"kind":"SuperTrait","from":{"krate":0,"index":310},"to":{"krate":0,"index":328}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\tls.rs","byte_start":35521,"byte_end":35530,"line_start":12,"line_end":12,"column_start":17,"column_end":26},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":492},"to":{"krate":0,"index":310}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\nanorand-0.7.0\\src\\tls.rs","byte_start":35628,"byte_end":35637,"line_start":18,"line_end":18,"column_start":28,"column_end":37},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":492},"to":{"krate":0,"index":328}}]}