{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1","program":"C:\\Users\\Administrator\\.rustup\\toolchains\\stable-x86_64-pc-windows-gnu\\bin\\rls.exe","arguments":["--crate-name","bytemuck","--edition=2018","C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"extern_crate_alloc\"","-C","metadata=78da95ec98800f41","-C","extra-filename=-78da95ec98800f41","--out-dir","d:\\gorepository\\Rust_learning\\learn_rust\\src\\rust_exec\\src\\snake\\target\\rls\\debug\\deps","-L","dependency=d:\\gorepository\\Rust_learning\\learn_rust\\src\\rust_exec\\src\\snake\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Administrator\\.rustup/toolchains/stable-x86_64-pc-windows-gnu"],"output":"d:\\gorepository\\Rust_learning\\learn_rust\\src\\rust_exec\\src\\snake\\target\\rls\\debug\\deps\\libbytemuck-78da95ec98800f41.rmeta"},"prelude":{"crate_id":{"name":"bytemuck","disambiguator":[6688724813363203518,0]},"crate_root":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src","external_crates":[{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[5406660558723523310,0]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[6038961408070452265,0]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[6202505720861038248,0]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","num":4,"id":{"name":"alloc","disambiguator":[8289845166519128743,0]}}],"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":0,"byte_end":10834,"line_start":1,"line_end":352,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":0},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":2137,"byte_end":2141,"line_start":56,"line_end":56,"column_start":11,"column_end":15},"alias_span":null,"name":"__core","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":2800,"byte_end":2801,"line_start":81,"line_end":81,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":2846,"byte_end":2847,"line_start":84,"line_end":84,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"AnyBitPattern","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":2884,"byte_end":2901,"line_start":87,"line_end":87,"column_start":18,"column_end":35},"alias_span":null,"name":"CheckedBitPattern","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":2951,"byte_end":2952,"line_start":92,"line_end":92,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"Zeroable","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":2977,"byte_end":2978,"line_start":95,"line_end":95,"column_start":14,"column_end":15},"alias_span":null,"name":"*","value":"Pod","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":3015,"byte_end":3016,"line_start":98,"line_end":98,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"NoUninit","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":3055,"byte_end":3056,"line_start":101,"line_end":101,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":3093,"byte_end":3094,"line_start":104,"line_end":104,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":3135,"byte_end":3136,"line_start":107,"line_end":107,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":0,"byte_end":10834,"line_start":1,"line_end":352,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":158},{"krate":0,"index":161},{"krate":0,"index":216},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":396},{"krate":0,"index":802},{"krate":0,"index":811},{"krate":0,"index":813},{"krate":0,"index":815},{"krate":0,"index":816},{"krate":0,"index":817},{"krate":0,"index":819},{"krate":0,"index":820},{"krate":0,"index":822},{"krate":0,"index":397},{"krate":0,"index":399},{"krate":0,"index":401},{"krate":0,"index":403},{"krate":0,"index":405},{"krate":0,"index":407},{"krate":0,"index":409},{"krate":0,"index":411},{"krate":0,"index":413},{"krate":0,"index":415},{"krate":0,"index":418},{"krate":0,"index":421},{"krate":0,"index":424},{"krate":0,"index":427},{"krate":0,"index":430},{"krate":0,"index":433},{"krate":0,"index":436},{"krate":0,"index":439},{"krate":0,"index":442},{"krate":0,"index":445},{"krate":0,"index":448}],"decl_id":null,"docs":" This crate gives small utilities for casting between plain data types.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":11,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"/ This crate gives small utilities for casting between plain data types.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":107,"byte_end":181,"line_start":5,"line_end":5,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":182,"byte_end":185,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ## Basics","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":186,"byte_end":199,"line_start":7,"line_end":7,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":200,"byte_end":203,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Data comes in five basic forms in Rust, so we have five basic casting","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":204,"byte_end":277,"line_start":9,"line_end":9,"column_start":1,"column_end":74}},{"value":"/ functions:","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":278,"byte_end":292,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":293,"byte_end":296,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ * `T` uses [`cast`]","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":297,"byte_end":320,"line_start":12,"line_end":12,"column_start":1,"column_end":24}},{"value":"/ * `&T` uses [`cast_ref`]","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":321,"byte_end":349,"line_start":13,"line_end":13,"column_start":1,"column_end":29}},{"value":"/ * `&mut T` uses [`cast_mut`]","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":350,"byte_end":382,"line_start":14,"line_end":14,"column_start":1,"column_end":33}},{"value":"/ * `&[T]` uses [`cast_slice`]","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":383,"byte_end":415,"line_start":15,"line_end":15,"column_start":1,"column_end":33}},{"value":"/ * `&mut [T]` uses [`cast_slice_mut`]","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":416,"byte_end":456,"line_start":16,"line_end":16,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":457,"byte_end":460,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Some casts will never fail (eg: `cast::<u32, f32>` always works), other","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":461,"byte_end":536,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/ casts might fail (eg: `cast_ref::<[u8; 4], u32>` will fail if the reference","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":537,"byte_end":616,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ isn't already aligned to 4). Each casting function has a \"try\" version which","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":617,"byte_end":697,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ will return a `Result`, and the \"normal\" version which will simply panic on","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":698,"byte_end":777,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ invalid input.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":778,"byte_end":796,"line_start":22,"line_end":22,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":797,"byte_end":800,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ## Using Your Own Types","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":801,"byte_end":828,"line_start":24,"line_end":24,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":829,"byte_end":832,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ All the functions here are guarded by the [`Pod`] trait, which is a","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":833,"byte_end":904,"line_start":26,"line_end":26,"column_start":1,"column_end":72}},{"value":"/ sub-trait of the [`Zeroable`] trait.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":905,"byte_end":945,"line_start":27,"line_end":27,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":946,"byte_end":949,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ If you're very sure that your type is eligible, you can implement those","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":950,"byte_end":1025,"line_start":29,"line_end":29,"column_start":1,"column_end":76}},{"value":"/ traits for your type and then they'll have full casting support. However,","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":1026,"byte_end":1103,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"/ these traits are `unsafe`, and you should carefully read the requirements","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":1104,"byte_end":1181,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/ before adding the them to your own types.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":1182,"byte_end":1227,"line_start":32,"line_end":32,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":1228,"byte_end":1231,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ## Features","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":1232,"byte_end":1247,"line_start":34,"line_end":34,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":1248,"byte_end":1251,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ * This crate is core only by default, but if you're using Rust 1.36 or later","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":1252,"byte_end":1332,"line_start":36,"line_end":36,"column_start":1,"column_end":81}},{"value":"/   you can enable the `extern_crate_alloc` cargo feature for some additional","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":1333,"byte_end":1412,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/   methods related to `Box` and `Vec`. Note that the `docs.rs` documentation","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":1413,"byte_end":1492,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/   is always built with `extern_crate_alloc` cargo feature enabled.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":1493,"byte_end":1563,"line_start":39,"line_end":39,"column_start":1,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"allocation","qualname":"::allocation","value":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":51},{"krate":0,"index":53},{"krate":0,"index":57},{"krate":0,"index":59},{"krate":0,"index":63},{"krate":0,"index":66}],"decl_id":null,"docs":" Stuff to boost things in the `alloc` crate.","sig":null,"attributes":[{"value":"cfg(feature = \"extern_crate_alloc\")","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":2682,"byte_end":2720,"line_start":78,"line_end":78,"column_start":1,"column_end":39}},{"value":"cfg(feature = \"extern_crate_alloc\")","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":11188,"byte_end":11227,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"/ Stuff to boost things in the `alloc` crate.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":11229,"byte_end":11276,"line_start":3,"line_end":3,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":11277,"byte_end":11280,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ * You must enable the `extern_crate_alloc` feature of `bytemuck` or you will","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":11281,"byte_end":11361,"line_start":5,"line_end":5,"column_start":1,"column_end":81}},{"value":"/   not be able to use this module! This is generally done by adding the","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":11362,"byte_end":11436,"line_start":6,"line_end":6,"column_start":1,"column_end":75}},{"value":"/   feature to the dependency in Cargo.toml like so:","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":11437,"byte_end":11491,"line_start":7,"line_end":7,"column_start":1,"column_end":55}},{"value":"/   `bytemuck = { version = \"VERSION_YOU_ARE_USING\", features = [\"extern_crate_alloc\"]}`","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":11492,"byte_end":11582,"line_start":8,"line_end":8,"column_start":1,"column_end":91}}]},{"kind":"Function","id":{"krate":0,"index":40},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":11786,"byte_end":11794,"line_start":21,"line_end":21,"column_start":8,"column_end":16},"name":"cast_box","qualname":"::allocation::cast_box","value":"pub fn cast_box<A: NoUninit, B: AnyBitPattern>(Box<A>) -> Box<B>","parent":null,"children":[],"decl_id":null,"docs":" As [`try_cast_box`](try_cast_box), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_cast_box`](try_cast_box), but unwraps for you.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":11709,"byte_end":11768,"line_start":19,"line_end":19,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":11769,"byte_end":11778,"line_start":20,"line_end":20,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":44},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":12256,"byte_end":12268,"line_start":35,"line_end":35,"column_start":8,"column_end":20},"name":"try_cast_box","qualname":"::allocation::try_cast_box","value":"pub fn try_cast_box<A: NoUninit, B: AnyBitPattern>(Box<A>)\n-> Result<Box<B>, (PodCastError, Box<A>)>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to cast the content type of a [`Box`](alloc::boxed::Box).","sig":null,"attributes":[{"value":"/ Attempts to cast the content type of a [`Box`](alloc::boxed::Box).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":11908,"byte_end":11978,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":11979,"byte_end":11982,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ On failure you get back an error along with the starting `Box`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":11983,"byte_end":12050,"line_start":27,"line_end":27,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":12051,"byte_end":12054,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":12055,"byte_end":12069,"line_start":29,"line_end":29,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":12070,"byte_end":12073,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ * The start and end content type of the `Box` must have the exact same","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":12074,"byte_end":12148,"line_start":31,"line_end":31,"column_start":1,"column_end":75}},{"value":"/   alignment.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":12149,"byte_end":12165,"line_start":32,"line_end":32,"column_start":1,"column_end":17}},{"value":"/ * The start and end size of the `Box` must have the exact same size.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":12166,"byte_end":12238,"line_start":33,"line_end":33,"column_start":1,"column_end":73}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":12239,"byte_end":12248,"line_start":34,"line_end":34,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":47},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":13149,"byte_end":13163,"line_start":60,"line_end":60,"column_start":8,"column_end":22},"name":"try_zeroed_box","qualname":"::allocation::try_zeroed_box","value":"pub fn try_zeroed_box<T: Zeroable>() -> Result<Box<T>, ()>","parent":null,"children":[],"decl_id":null,"docs":" Allocates a `Box<T>` with all of the contents being zeroed out.","sig":null,"attributes":[{"value":"/ Allocates a `Box<T>` with all of the contents being zeroed out.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":12729,"byte_end":12796,"line_start":49,"line_end":49,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":12797,"byte_end":12800,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ This uses the global allocator to create a zeroed allocation and _then_","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":12801,"byte_end":12876,"line_start":51,"line_end":51,"column_start":1,"column_end":76}},{"value":"/ turns it into a Box. In other words, it's 100% assured that the zeroed data","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":12877,"byte_end":12956,"line_start":52,"line_end":52,"column_start":1,"column_end":80}},{"value":"/ won't be put temporarily on the stack. You can make a box of any size","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":12957,"byte_end":13030,"line_start":53,"line_end":53,"column_start":1,"column_end":74}},{"value":"/ without fear of a stack overflow.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":13031,"byte_end":13068,"line_start":54,"line_end":54,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":13069,"byte_end":13072,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":13073,"byte_end":13087,"line_start":56,"line_end":56,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":13088,"byte_end":13091,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ This fails if the allocation fails.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":13092,"byte_end":13131,"line_start":58,"line_end":58,"column_start":1,"column_end":40}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":13132,"byte_end":13141,"line_start":59,"line_end":59,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":51},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":14288,"byte_end":14298,"line_start":90,"line_end":90,"column_start":8,"column_end":18},"name":"zeroed_box","qualname":"::allocation::zeroed_box","value":"pub fn zeroed_box<T: Zeroable>() -> Box<T>","parent":null,"children":[],"decl_id":null,"docs":" As [`try_zeroed_box`], but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_zeroed_box`], but unwraps for you.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":14223,"byte_end":14270,"line_start":88,"line_end":88,"column_start":1,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":14271,"byte_end":14280,"line_start":89,"line_end":89,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":53},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":14772,"byte_end":14792,"line_start":105,"line_end":105,"column_start":8,"column_end":28},"name":"try_zeroed_slice_box","qualname":"::allocation::try_zeroed_slice_box","value":"pub fn try_zeroed_slice_box<T: Zeroable>(usize) -> Result<Box<[T]>, ()>","parent":null,"children":[],"decl_id":null,"docs":" Allocates a `Box<[T]>` with all contents being zeroed out.","sig":null,"attributes":[{"value":"/ Allocates a `Box<[T]>` with all contents being zeroed out.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":14357,"byte_end":14419,"line_start":94,"line_end":94,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":14420,"byte_end":14423,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ This uses the global allocator to create a zeroed allocation and _then_","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":14424,"byte_end":14499,"line_start":96,"line_end":96,"column_start":1,"column_end":76}},{"value":"/ turns it into a Box. In other words, it's 100% assured that the zeroed data","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":14500,"byte_end":14579,"line_start":97,"line_end":97,"column_start":1,"column_end":80}},{"value":"/ won't be put temporarily on the stack. You can make a box of any size","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":14580,"byte_end":14653,"line_start":98,"line_end":98,"column_start":1,"column_end":74}},{"value":"/ without fear of a stack overflow.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":14654,"byte_end":14691,"line_start":99,"line_end":99,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":14692,"byte_end":14695,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":14696,"byte_end":14710,"line_start":101,"line_end":101,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":14711,"byte_end":14714,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ This fails if the allocation fails.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":14715,"byte_end":14754,"line_start":103,"line_end":103,"column_start":1,"column_end":40}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":14755,"byte_end":14764,"line_start":104,"line_end":104,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":57},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":15868,"byte_end":15884,"line_start":136,"line_end":136,"column_start":8,"column_end":24},"name":"zeroed_slice_box","qualname":"::allocation::zeroed_slice_box","value":"pub fn zeroed_slice_box<T: Zeroable>(usize) -> Box<[T]>","parent":null,"children":[],"decl_id":null,"docs":" As [`try_zeroed_slice_box`](try_zeroed_slice_box), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_zeroed_slice_box`](try_zeroed_slice_box), but unwraps for you.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":15785,"byte_end":15860,"line_start":135,"line_end":135,"column_start":1,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":59},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":16047,"byte_end":16055,"line_start":142,"line_end":142,"column_start":8,"column_end":16},"name":"cast_vec","qualname":"::allocation::cast_vec","value":"pub fn cast_vec<A: NoUninit, B: AnyBitPattern>(Vec<A>) -> Vec<B>","parent":null,"children":[],"decl_id":null,"docs":" As [`try_cast_vec`](try_cast_vec), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_cast_vec`](try_cast_vec), but unwraps for you.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":15970,"byte_end":16029,"line_start":140,"line_end":140,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":16030,"byte_end":16039,"line_start":141,"line_end":141,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":63},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":16685,"byte_end":16697,"line_start":159,"line_end":159,"column_start":8,"column_end":20},"name":"try_cast_vec","qualname":"::allocation::try_cast_vec","value":"pub fn try_cast_vec<A: NoUninit, B: AnyBitPattern>(Vec<A>)\n-> Result<Vec<B>, (PodCastError, Vec<A>)>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to cast the content type of a [`Vec`](alloc::vec::Vec).","sig":null,"attributes":[{"value":"/ Attempts to cast the content type of a [`Vec`](alloc::vec::Vec).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":16169,"byte_end":16237,"line_start":146,"line_end":146,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":16238,"byte_end":16241,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ On failure you get back an error along with the starting `Vec`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":16242,"byte_end":16309,"line_start":148,"line_end":148,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":16310,"byte_end":16313,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":16314,"byte_end":16328,"line_start":150,"line_end":150,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":16329,"byte_end":16332,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ * The start and end content type of the `Vec` must have the exact same","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":16333,"byte_end":16407,"line_start":152,"line_end":152,"column_start":1,"column_end":75}},{"value":"/   alignment.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":16408,"byte_end":16424,"line_start":153,"line_end":153,"column_start":1,"column_end":17}},{"value":"/ * The start and end size of the `Vec` must have the exact same size.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":16425,"byte_end":16497,"line_start":154,"line_end":154,"column_start":1,"column_end":73}},{"value":"/ * In the future this second restriction might be lessened by having the","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":16498,"byte_end":16573,"line_start":155,"line_end":155,"column_start":1,"column_end":76}},{"value":"/   capacity and length get adjusted during transmutation, but for now it's","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":16574,"byte_end":16651,"line_start":156,"line_end":156,"column_start":1,"column_end":78}},{"value":"/   absolute.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":16652,"byte_end":16667,"line_start":157,"line_end":157,"column_start":1,"column_end":16}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":16668,"byte_end":16677,"line_start":158,"line_end":158,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":66},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":18576,"byte_end":18594,"line_start":202,"line_end":202,"column_start":8,"column_end":26},"name":"pod_collect_to_vec","qualname":"::allocation::pod_collect_to_vec","value":"pub fn pod_collect_to_vec<A: NoUninit + AnyBitPattern, B: NoUninit +\n                          AnyBitPattern>(&[A]) -> Vec<B>","parent":null,"children":[],"decl_id":null,"docs":" This \"collects\" a slice of pod data into a vec of a different pod type.","sig":null,"attributes":[{"value":"/ This \"collects\" a slice of pod data into a vec of a different pod type.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":17975,"byte_end":18050,"line_start":186,"line_end":186,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":18051,"byte_end":18054,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ Unlike with [`cast_slice`] and [`cast_slice_mut`], this will always work.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":18055,"byte_end":18132,"line_start":188,"line_end":188,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":18133,"byte_end":18136,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ The output vec will be of a minimal size/capacity to hold the slice given.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":18137,"byte_end":18215,"line_start":190,"line_end":190,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":18216,"byte_end":18219,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":18220,"byte_end":18231,"line_start":192,"line_end":192,"column_start":1,"column_end":12}},{"value":"/ # use bytemuck::*;","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":18232,"byte_end":18254,"line_start":193,"line_end":193,"column_start":1,"column_end":23}},{"value":"/ let halfwords: [u16; 4] = [5, 6, 7, 8];","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":18255,"byte_end":18298,"line_start":194,"line_end":194,"column_start":1,"column_end":44}},{"value":"/ let vec_of_words: Vec<u32> = pod_collect_to_vec(&halfwords);","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":18299,"byte_end":18363,"line_start":195,"line_end":195,"column_start":1,"column_end":65}},{"value":"/ if cfg!(target_endian = \"little\") {","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":18364,"byte_end":18403,"line_start":196,"line_end":196,"column_start":1,"column_end":40}},{"value":"/   assert_eq!(&vec_of_words[..], &[0x0006_0005, 0x0008_0007][..])","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":18404,"byte_end":18472,"line_start":197,"line_end":197,"column_start":1,"column_end":69}},{"value":"/ } else {","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":18473,"byte_end":18485,"line_start":198,"line_end":198,"column_start":1,"column_end":13}},{"value":"/   assert_eq!(&vec_of_words[..], &[0x0005_0006, 0x0007_0008][..])","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":18486,"byte_end":18554,"line_start":199,"line_end":199,"column_start":1,"column_end":69}},{"value":"/ }","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":18555,"byte_end":18560,"line_start":200,"line_end":200,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\allocation.rs","byte_start":18561,"byte_end":18568,"line_start":201,"line_end":201,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":21414,"byte_end":21427,"line_start":41,"line_end":41,"column_start":18,"column_end":31},"name":"AnyBitPattern","qualname":"::anybitpattern::AnyBitPattern","value":"AnyBitPattern: Zeroable + Sized + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\" types that are valid for any bit pattern.","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\" types that are valid for any bit pattern.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":19382,"byte_end":19461,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":19462,"byte_end":19465,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The requirements for this is very similar to [`Pod`],","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":19466,"byte_end":19523,"line_start":5,"line_end":5,"column_start":1,"column_end":58}},{"value":"/ except that it doesn't require that the type contains no uninit (or padding) bytes.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":19524,"byte_end":19611,"line_start":6,"line_end":6,"column_start":1,"column_end":88}},{"value":"/ This limits what you can do with a type of this kind, but also broadens the","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":19612,"byte_end":19691,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ included types to `repr(C)` `struct`s that contain padding as well as `union`s. Notably, you can only cast","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":19692,"byte_end":19802,"line_start":8,"line_end":8,"column_start":1,"column_end":111}},{"value":"/ *immutable* references and *owned* values into [`AnyBitPattern`] types, not","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":19803,"byte_end":19882,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/ *mutable* references.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":19883,"byte_end":19908,"line_start":10,"line_end":10,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":19909,"byte_end":19912,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`Pod`] is a subset of [`AnyBitPattern`], meaning that any `T: Pod` is also","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":19913,"byte_end":19992,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"/ [`AnyBitPattern`] but any `T: AnyBitPattern` is not necessarily [`Pod`].","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":19993,"byte_end":20069,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":20070,"byte_end":20073,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [`AnyBitPattern`] is a subset of [`Zeroable`], meaning that any `T: AnyBitPattern`","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":20074,"byte_end":20160,"line_start":15,"line_end":15,"column_start":1,"column_end":87}},{"value":"/ is also [`Zeroable`], but any `T: Zeroable` is not necessarily [`AnyBitPattern  ]","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":20161,"byte_end":20246,"line_start":16,"line_end":16,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":20247,"byte_end":20250,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Derive","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":20251,"byte_end":20263,"line_start":18,"line_end":18,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":20264,"byte_end":20267,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ A `#[derive(AnyBitPattern)]` macro is provided under the `derive` feature flag which will","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":20268,"byte_end":20361,"line_start":20,"line_end":20,"column_start":1,"column_end":94}},{"value":"/ automatically validate the requirements of this trait and implement the","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":20362,"byte_end":20437,"line_start":21,"line_end":21,"column_start":1,"column_end":76}},{"value":"/ trait for you for both structs and enums. This is the recommended method for","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":20438,"byte_end":20518,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/ implementing the trait, however it's also possible to do manually. If you","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":20519,"byte_end":20596,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"/ implement it manually, you *must* carefully follow the below safety rules.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":20597,"byte_end":20675,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":20676,"byte_end":20679,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ * *NOTE: even `C-style`, fieldless enums are intentionally **excluded** from","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":20680,"byte_end":20760,"line_start":26,"line_end":26,"column_start":1,"column_end":81}},{"value":"/ this trait, since it is **unsound** for an enum to have a discriminant value","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":20761,"byte_end":20841,"line_start":27,"line_end":27,"column_start":1,"column_end":81}},{"value":"/ that is not one of its defined variants.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":20842,"byte_end":20886,"line_start":28,"line_end":28,"column_start":1,"column_end":45}},{"value":"/ ","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":20887,"byte_end":20891,"line_start":29,"line_end":29,"column_start":1,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":20892,"byte_end":20904,"line_start":30,"line_end":30,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":20905,"byte_end":20908,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Similar to [`Pod`] except we disregard the rule about it must not contain uninit bytes.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":20909,"byte_end":21000,"line_start":32,"line_end":32,"column_start":1,"column_end":92}},{"value":"/ Still, this is a quite strong guarantee about a type, so *be careful* when","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":21001,"byte_end":21079,"line_start":33,"line_end":33,"column_start":1,"column_end":79}},{"value":"/ implementing it manually.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":21080,"byte_end":21109,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":21110,"byte_end":21113,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":21114,"byte_end":21154,"line_start":36,"line_end":36,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":21155,"byte_end":21202,"line_start":37,"line_end":37,"column_start":1,"column_end":48}},{"value":"/ * The type must be valid for any bit pattern of its backing memory.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":21203,"byte_end":21274,"line_start":38,"line_end":38,"column_start":1,"column_end":72}},{"value":"/ * Structs need to have all fields also be `AnyBitPattern`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":21275,"byte_end":21337,"line_start":39,"line_end":39,"column_start":1,"column_end":63}},{"value":"/ * There's probably more, don't mess it up (I mean it).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":21338,"byte_end":21396,"line_start":40,"line_end":40,"column_start":1,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"checked","qualname":"::checked","value":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":94},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":104},{"krate":0,"index":107},{"krate":0,"index":453},{"krate":0,"index":459},{"krate":0,"index":461},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":471},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":123},{"krate":0,"index":126},{"krate":0,"index":129},{"krate":0,"index":133},{"krate":0,"index":137},{"krate":0,"index":139},{"krate":0,"index":141},{"krate":0,"index":143},{"krate":0,"index":146},{"krate":0,"index":149},{"krate":0,"index":152},{"krate":0,"index":155}],"decl_id":null,"docs":" Checked versions of the casting functions exposed in crate root\n that support [`CheckedBitPattern`] types.\n","sig":null,"attributes":[{"value":"/ Checked versions of the casting functions exposed in crate root","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":21554,"byte_end":21621,"line_start":1,"line_end":1,"column_start":1,"column_end":68}},{"value":"/ that support [`CheckedBitPattern`] types.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":21622,"byte_end":21667,"line_start":2,"line_end":2,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":26366,"byte_end":26383,"line_start":121,"line_end":121,"column_start":18,"column_end":35},"name":"CheckedBitPattern","qualname":"::checked::CheckedBitPattern","value":"CheckedBitPattern: Copy","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99}],"decl_id":null,"docs":" A marker trait that allows types that have some invalid bit patterns to be used\n in places that otherwise require [`AnyBitPattern`] or [`Pod`] types by performing\n a runtime check on a perticular set of bits. This is particularly\n useful for types like fieldless ('C-style') enums, [`char`], bool, and structs containing them.","sig":null,"attributes":[{"value":"/ A marker trait that allows types that have some invalid bit patterns to be used","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":21748,"byte_end":21831,"line_start":6,"line_end":6,"column_start":1,"column_end":84}},{"value":"/ in places that otherwise require [`AnyBitPattern`] or [`Pod`] types by performing","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":21832,"byte_end":21917,"line_start":7,"line_end":7,"column_start":1,"column_end":86}},{"value":"/ a runtime check on a perticular set of bits. This is particularly","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":21918,"byte_end":21987,"line_start":8,"line_end":8,"column_start":1,"column_end":70}},{"value":"/ useful for types like fieldless ('C-style') enums, [`char`], bool, and structs containing them.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":21988,"byte_end":22087,"line_start":9,"line_end":9,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":22088,"byte_end":22091,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ To do this, we define a `Bits` type which is a type with equivalent layout","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":22092,"byte_end":22170,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/ to `Self` other than the invalid bit patterns which disallow `Self` from","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":22171,"byte_end":22247,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ being [`AnyBitPattern`]. This `Bits` type must itself implement [`AnyBitPattern`].","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":22248,"byte_end":22334,"line_start":13,"line_end":13,"column_start":1,"column_end":87}},{"value":"/ Then, we implement a function that checks wheter a certain instance","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":22335,"byte_end":22406,"line_start":14,"line_end":14,"column_start":1,"column_end":72}},{"value":"/ of the `Bits` is also a valid bit pattern of `Self`. If this check passes, then we","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":22407,"byte_end":22493,"line_start":15,"line_end":15,"column_start":1,"column_end":87}},{"value":"/ can allow casting from the `Bits` to `Self` (and therefore, any type which","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":22494,"byte_end":22572,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ is able to be cast to `Bits` is also able to be cast to `Self`).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":22573,"byte_end":22641,"line_start":17,"line_end":17,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":22642,"byte_end":22645,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [`AnyBitPattern`] is a subset of [`CheckedBitPattern`], meaning that any `T: AnyBitPattern` is also","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":22646,"byte_end":22749,"line_start":19,"line_end":19,"column_start":1,"column_end":104}},{"value":"/ [`CheckedBitPattern`]. This means you can also use any [`AnyBitPattern`] type in the checked versions","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":22750,"byte_end":22855,"line_start":20,"line_end":20,"column_start":1,"column_end":106}},{"value":"/ of casting functions in this module. If it's possible, prefer implementing [`AnyBitPattern`] for your","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":22856,"byte_end":22961,"line_start":21,"line_end":21,"column_start":1,"column_end":106}},{"value":"/ type directly instead of [`CheckedBitPattern`] as it gives greater flexibility.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":22962,"byte_end":23045,"line_start":22,"line_end":22,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23046,"byte_end":23049,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Derive","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23050,"byte_end":23062,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23063,"byte_end":23066,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ A `#[derive(CheckedBitPattern)]` macro is provided under the `derive` feature flag which will","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23067,"byte_end":23164,"line_start":26,"line_end":26,"column_start":1,"column_end":98}},{"value":"/ automatically validate the requirements of this trait and implement the","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23165,"byte_end":23240,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/ trait for you for both enums and structs. This is the recommended method for","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23241,"byte_end":23321,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/ implementing the trait, however it's also possible to do manually.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23322,"byte_end":23392,"line_start":29,"line_end":29,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23393,"byte_end":23396,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23397,"byte_end":23410,"line_start":31,"line_end":31,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23411,"byte_end":23414,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ If manually implementing the trait, we can do something like so:","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23415,"byte_end":23483,"line_start":33,"line_end":33,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23484,"byte_end":23487,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23488,"byte_end":23499,"line_start":35,"line_end":35,"column_start":1,"column_end":12}},{"value":"/ use bytemuck::{CheckedBitPattern, NoUninit};","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23500,"byte_end":23548,"line_start":36,"line_end":36,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23549,"byte_end":23552,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ #[repr(u32)]","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23553,"byte_end":23569,"line_start":38,"line_end":38,"column_start":1,"column_end":17}},{"value":"/ #[derive(Copy, Clone)]","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23570,"byte_end":23596,"line_start":39,"line_end":39,"column_start":1,"column_end":27}},{"value":"/ enum MyEnum {","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23597,"byte_end":23614,"line_start":40,"line_end":40,"column_start":1,"column_end":18}},{"value":"/     Variant0 = 0,","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23615,"byte_end":23636,"line_start":41,"line_end":41,"column_start":1,"column_end":22}},{"value":"/     Variant1 = 1,","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23637,"byte_end":23658,"line_start":42,"line_end":42,"column_start":1,"column_end":22}},{"value":"/     Variant2 = 2,","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23659,"byte_end":23680,"line_start":43,"line_end":43,"column_start":1,"column_end":22}},{"value":"/ }","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23681,"byte_end":23686,"line_start":44,"line_end":44,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23687,"byte_end":23690,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ unsafe impl CheckedBitPattern for MyEnum {","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23691,"byte_end":23737,"line_start":46,"line_end":46,"column_start":1,"column_end":47}},{"value":"/     type Bits = u32;","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23738,"byte_end":23762,"line_start":47,"line_end":47,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23763,"byte_end":23766,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/     fn is_valid_bit_pattern(bits: &u32) -> bool {","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23767,"byte_end":23820,"line_start":49,"line_end":49,"column_start":1,"column_end":54}},{"value":"/         match *bits {","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23821,"byte_end":23846,"line_start":50,"line_end":50,"column_start":1,"column_end":26}},{"value":"/             0 | 1 | 2 => true,","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23847,"byte_end":23881,"line_start":51,"line_end":51,"column_start":1,"column_end":35}},{"value":"/             _ => false,","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23882,"byte_end":23909,"line_start":52,"line_end":52,"column_start":1,"column_end":28}},{"value":"/         }","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23910,"byte_end":23923,"line_start":53,"line_end":53,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23924,"byte_end":23933,"line_start":54,"line_end":54,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23934,"byte_end":23939,"line_start":55,"line_end":55,"column_start":1,"column_end":6}},{"value":"/ ","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23940,"byte_end":23944,"line_start":56,"line_end":56,"column_start":1,"column_end":5}},{"value":"/ // It is often useful to also implement `NoUninit` on our `CheckedBitPattern` types.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":23945,"byte_end":24033,"line_start":57,"line_end":57,"column_start":1,"column_end":89}},{"value":"/ // This will allow us to do casting of mutable references (and mutable slices).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":24034,"byte_end":24117,"line_start":58,"line_end":58,"column_start":1,"column_end":84}},{"value":"/ // It is not always possible to do so, but in this case we have no padding so it is.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":24118,"byte_end":24206,"line_start":59,"line_end":59,"column_start":1,"column_end":89}},{"value":"/ unsafe impl NoUninit for MyEnum {}","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":24207,"byte_end":24245,"line_start":60,"line_end":60,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":24246,"byte_end":24253,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":24254,"byte_end":24257,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ We can now use relevant casting functions. For example,","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":24258,"byte_end":24317,"line_start":63,"line_end":63,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":24318,"byte_end":24321,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":24322,"byte_end":24333,"line_start":65,"line_end":65,"column_start":1,"column_end":12}},{"value":"/ # use bytemuck::{CheckedBitPattern, NoUninit};","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":24334,"byte_end":24384,"line_start":66,"line_end":66,"column_start":1,"column_end":51}},{"value":"/ # #[repr(u32)]","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":24385,"byte_end":24403,"line_start":67,"line_end":67,"column_start":1,"column_end":19}},{"value":"/ # #[derive(Copy, Clone, PartialEq, Eq, Debug)]","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":24404,"byte_end":24454,"line_start":68,"line_end":68,"column_start":1,"column_end":51}},{"value":"/ # enum MyEnum {","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":24455,"byte_end":24474,"line_start":69,"line_end":69,"column_start":1,"column_end":20}},{"value":"/ #     Variant0 = 0,","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":24475,"byte_end":24498,"line_start":70,"line_end":70,"column_start":1,"column_end":24}},{"value":"/ #     Variant1 = 1,","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":24499,"byte_end":24522,"line_start":71,"line_end":71,"column_start":1,"column_end":24}},{"value":"/ #     Variant2 = 2,","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":24523,"byte_end":24546,"line_start":72,"line_end":72,"column_start":1,"column_end":24}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":24547,"byte_end":24554,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/ # unsafe impl NoUninit for MyEnum {}","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":24555,"byte_end":24595,"line_start":74,"line_end":74,"column_start":1,"column_end":41}},{"value":"/ # unsafe impl CheckedBitPattern for MyEnum {","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":24596,"byte_end":24644,"line_start":75,"line_end":75,"column_start":1,"column_end":49}},{"value":"/ #     type Bits = u32;","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":24645,"byte_end":24671,"line_start":76,"line_end":76,"column_start":1,"column_end":27}},{"value":"/ #     fn is_valid_bit_pattern(bits: &u32) -> bool {","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":24672,"byte_end":24727,"line_start":77,"line_end":77,"column_start":1,"column_end":56}},{"value":"/ #         match *bits {","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":24728,"byte_end":24755,"line_start":78,"line_end":78,"column_start":1,"column_end":28}},{"value":"/ #             0 | 1 | 2 => true,","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":24756,"byte_end":24792,"line_start":79,"line_end":79,"column_start":1,"column_end":37}},{"value":"/ #             _ => false,","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":24793,"byte_end":24822,"line_start":80,"line_end":80,"column_start":1,"column_end":30}},{"value":"/ #         }","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":24823,"byte_end":24838,"line_start":81,"line_end":81,"column_start":1,"column_end":16}},{"value":"/ #     }","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":24839,"byte_end":24850,"line_start":82,"line_end":82,"column_start":1,"column_end":12}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":24851,"byte_end":24858,"line_start":83,"line_end":83,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::{bytes_of, bytes_of_mut};","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":24859,"byte_end":24902,"line_start":84,"line_end":84,"column_start":1,"column_end":44}},{"value":"/ use bytemuck::checked;","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":24903,"byte_end":24929,"line_start":85,"line_end":85,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":24930,"byte_end":24933,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ let bytes = bytes_of(&2u32);","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":24934,"byte_end":24966,"line_start":87,"line_end":87,"column_start":1,"column_end":33}},{"value":"/ let result = checked::try_from_bytes::<MyEnum>(bytes);","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":24967,"byte_end":25025,"line_start":88,"line_end":88,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(result, Ok(&MyEnum::Variant2));","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":25026,"byte_end":25072,"line_start":89,"line_end":89,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":25073,"byte_end":25076,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ // Fails for invalid discriminant","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":25077,"byte_end":25114,"line_start":91,"line_end":91,"column_start":1,"column_end":38}},{"value":"/ let bytes = bytes_of(&100u32);","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":25115,"byte_end":25149,"line_start":92,"line_end":92,"column_start":1,"column_end":35}},{"value":"/ let result = checked::try_from_bytes::<MyEnum>(bytes);","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":25150,"byte_end":25208,"line_start":93,"line_end":93,"column_start":1,"column_end":59}},{"value":"/ assert!(result.is_err());","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":25209,"byte_end":25238,"line_start":94,"line_end":94,"column_start":1,"column_end":30}},{"value":"/ ","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":25239,"byte_end":25243,"line_start":95,"line_end":95,"column_start":1,"column_end":5}},{"value":"/ // Since we implemented NoUninit, we can also cast mutably from an original type","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":25244,"byte_end":25328,"line_start":96,"line_end":96,"column_start":1,"column_end":85}},{"value":"/ // that is `NoUninit + AnyBitPattern`:","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":25329,"byte_end":25371,"line_start":97,"line_end":97,"column_start":1,"column_end":43}},{"value":"/ let mut my_u32 = 2u32;","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":25372,"byte_end":25398,"line_start":98,"line_end":98,"column_start":1,"column_end":27}},{"value":"/ {","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":25399,"byte_end":25404,"line_start":99,"line_end":99,"column_start":1,"column_end":6}},{"value":"/   let as_enum_mut = checked::cast_mut::<_, MyEnum>(&mut my_u32);","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":25405,"byte_end":25473,"line_start":100,"line_end":100,"column_start":1,"column_end":69}},{"value":"/   assert_eq!(as_enum_mut, &mut MyEnum::Variant2);","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":25474,"byte_end":25527,"line_start":101,"line_end":101,"column_start":1,"column_end":54}},{"value":"/   *as_enum_mut = MyEnum::Variant0;","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":25528,"byte_end":25566,"line_start":102,"line_end":102,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":25567,"byte_end":25572,"line_start":103,"line_end":103,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(my_u32, 0u32);","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":25573,"byte_end":25602,"line_start":104,"line_end":104,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":25603,"byte_end":25610,"line_start":105,"line_end":105,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":25611,"byte_end":25614,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":25615,"byte_end":25627,"line_start":107,"line_end":107,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":25628,"byte_end":25631,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ * `Self` *must* have the same layout as the specified `Bits` except for","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":25632,"byte_end":25707,"line_start":109,"line_end":109,"column_start":1,"column_end":76}},{"value":"/ the possible invalid bit patterns being checked during [`is_valid_bit_pattern`].","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":25708,"byte_end":25792,"line_start":110,"line_end":110,"column_start":1,"column_end":85}},{"value":"/   * This almost certainly means your type must be `#[repr(C)]` or a similar","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":25793,"byte_end":25872,"line_start":111,"line_end":111,"column_start":1,"column_end":80}},{"value":"/   specified repr, but if you think you know better, you probably don't. If you","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":25873,"byte_end":25955,"line_start":112,"line_end":112,"column_start":1,"column_end":83}},{"value":"/   still think you know better, be careful and have fun. And don't mess it up","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":25956,"byte_end":26036,"line_start":113,"line_end":113,"column_start":1,"column_end":81}},{"value":"/   (I mean it).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":26037,"byte_end":26055,"line_start":114,"line_end":114,"column_start":1,"column_end":19}},{"value":"/ * If [`is_valid_bit_pattern`] returns true, then the bit pattern contained in","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":26056,"byte_end":26137,"line_start":115,"line_end":115,"column_start":1,"column_end":82}},{"value":"/   `bits` must also be valid for an instance of `Self`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":26138,"byte_end":26196,"line_start":116,"line_end":116,"column_start":1,"column_end":59}},{"value":"/ * Probably more, don't mess it up (I mean it 2.0)","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":26197,"byte_end":26250,"line_start":117,"line_end":117,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":26251,"byte_end":26254,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ [`is_valid_bit_pattern`]: CheckedBitPattern::is_valid_bit_pattern","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":26255,"byte_end":26324,"line_start":119,"line_end":119,"column_start":1,"column_end":70}},{"value":"/ [`Pod`]: crate::Pod","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":26325,"byte_end":26348,"line_start":120,"line_end":120,"column_start":1,"column_end":24}}]},{"kind":"Type","id":{"krate":0,"index":98},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":26640,"byte_end":26644,"line_start":126,"line_end":126,"column_start":8,"column_end":12},"name":"Bits","qualname":"::checked::CheckedBitPattern::Bits","value":"type Bits: AnyBitPattern;","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" `Self` *must* have the same layout as the specified `Bits` except for\n the possible invalid bit patterns being checked during [`is_valid_bit_pattern`].","sig":null,"attributes":[{"value":"/ `Self` *must* have the same layout as the specified `Bits` except for","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":26394,"byte_end":26467,"line_start":122,"line_end":122,"column_start":3,"column_end":76}},{"value":"/ the possible invalid bit patterns being checked during [`is_valid_bit_pattern`].","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":26470,"byte_end":26554,"line_start":123,"line_end":123,"column_start":3,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":26557,"byte_end":26560,"line_start":124,"line_end":124,"column_start":3,"column_end":6}},{"value":"/ [`is_valid_bit_pattern`]: CheckedBitPattern::is_valid_bit_pattern","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":26563,"byte_end":26632,"line_start":125,"line_end":125,"column_start":3,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":26760,"byte_end":26780,"line_start":129,"line_end":129,"column_start":6,"column_end":26},"name":"is_valid_bit_pattern","qualname":"::checked::CheckedBitPattern::is_valid_bit_pattern","value":"pub fn is_valid_bit_pattern(&Self::Bits) -> bool","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" If this function returns true, then it must be valid to reinterpret `bits` as `&Self`.\n","sig":null,"attributes":[{"value":"/ If this function returns true, then it must be valid to reinterpret `bits` as `&Self`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":26664,"byte_end":26754,"line_start":128,"line_end":128,"column_start":3,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":454},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":27563,"byte_end":27575,"line_start":166,"line_end":166,"column_start":3,"column_end":15},"name":"PodCastError","qualname":"::checked::CheckedCastError::PodCastError","value":"CheckedCastError::PodCastError(crate::PodCastError)","parent":{"krate":0,"index":453},"children":[],"decl_id":null,"docs":" An error occurred during a true-[`Pod`] cast\n","sig":null,"attributes":[{"value":"/ An error occurred during a true-[`Pod`] cast","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":27512,"byte_end":27560,"line_start":165,"line_end":165,"column_start":3,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":457},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":27850,"byte_end":27867,"line_start":171,"line_end":171,"column_start":3,"column_end":20},"name":"InvalidBitPattern","qualname":"::checked::CheckedCastError::InvalidBitPattern","value":"CheckedCastError::InvalidBitPattern","parent":{"krate":0,"index":453},"children":[],"decl_id":null,"docs":" When casting to a [`CheckedBitPattern`] type, it is possible that the original\n data contains an invalid bit pattern. If so, the cast will fail and\n this error will be returned. Will never happen on casts between\n [`Pod`] types.\n","sig":null,"attributes":[{"value":"/ When casting to a [`CheckedBitPattern`] type, it is possible that the original","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":27600,"byte_end":27682,"line_start":167,"line_end":167,"column_start":3,"column_end":85}},{"value":"/ data contains an invalid bit pattern. If so, the cast will fail and","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":27685,"byte_end":27756,"line_start":168,"line_end":168,"column_start":3,"column_end":74}},{"value":"/ this error will be returned. Will never happen on casts between","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":27759,"byte_end":27826,"line_start":169,"line_end":169,"column_start":3,"column_end":70}},{"value":"/ [`Pod`] types.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":27829,"byte_end":27847,"line_start":170,"line_end":170,"column_start":3,"column_end":21}}]},{"kind":"Enum","id":{"krate":0,"index":453},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":27491,"byte_end":27507,"line_start":164,"line_end":164,"column_start":10,"column_end":26},"name":"CheckedCastError","qualname":"::checked::CheckedCastError","value":"pub enum CheckedCastError {\n    PodCastError(crate::PodCastError),\n    InvalidBitPattern,\n}","parent":null,"children":[{"krate":0,"index":454},{"krate":0,"index":457}],"decl_id":null,"docs":" The things that can go wrong when casting between [`CheckedBitPattern`] data forms.\n","sig":null,"attributes":[{"value":"/ The things that can go wrong when casting between [`CheckedBitPattern`] data forms.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":27343,"byte_end":27430,"line_start":162,"line_end":162,"column_start":1,"column_end":88}}]},{"kind":"Function","id":{"krate":0,"index":114},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":28554,"byte_end":28568,"line_start":197,"line_end":197,"column_start":8,"column_end":22},"name":"try_from_bytes","qualname":"::checked::try_from_bytes","value":"pub fn try_from_bytes<T: CheckedBitPattern>(&[u8])\n-> Result<&T, CheckedCastError>","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":28301,"byte_end":28335,"line_start":189,"line_end":189,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":28336,"byte_end":28339,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":28340,"byte_end":28354,"line_start":191,"line_end":191,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":28355,"byte_end":28358,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":28359,"byte_end":28408,"line_start":193,"line_end":193,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":28409,"byte_end":28477,"line_start":194,"line_end":194,"column_start":1,"column_end":67}},{"value":"/ * If the slice contains an invalid bit pattern for `T`","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":28478,"byte_end":28536,"line_start":195,"line_end":195,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":28537,"byte_end":28546,"line_start":196,"line_end":196,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":116},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":29157,"byte_end":29175,"line_start":217,"line_end":217,"column_start":8,"column_end":26},"name":"try_from_bytes_mut","qualname":"::checked::try_from_bytes_mut","value":"pub fn try_from_bytes_mut<T: CheckedBitPattern + NoUninit>(&mut [u8])\n-> Result<&mut T, CheckedCastError>","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":28896,"byte_end":28938,"line_start":209,"line_end":209,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":28939,"byte_end":28942,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":28943,"byte_end":28957,"line_start":211,"line_end":211,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":28958,"byte_end":28961,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":28962,"byte_end":29011,"line_start":213,"line_end":213,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":29012,"byte_end":29080,"line_start":214,"line_end":214,"column_start":1,"column_end":67}},{"value":"/ * If the slice contains an invalid bit pattern for `T`","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":29081,"byte_end":29139,"line_start":215,"line_end":215,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":29140,"byte_end":29149,"line_start":216,"line_end":216,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":118},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":29731,"byte_end":29753,"line_start":235,"line_end":235,"column_start":8,"column_end":30},"name":"try_pod_read_unaligned","qualname":"::checked::try_pod_read_unaligned","value":"pub fn try_pod_read_unaligned<T: CheckedBitPattern>(&[u8])\n-> Result<T, CheckedCastError>","parent":null,"children":[],"decl_id":null,"docs":" Reads from the bytes as if they were a `T`.","sig":null,"attributes":[{"value":"/ Reads from the bytes as if they were a `T`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":29526,"byte_end":29573,"line_start":229,"line_end":229,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":29574,"byte_end":29577,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":29578,"byte_end":29592,"line_start":231,"line_end":231,"column_start":1,"column_end":15}},{"value":"/ * If the `bytes` length is not equal to `size_of::<T>()`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":29593,"byte_end":29654,"line_start":232,"line_end":232,"column_start":1,"column_end":62}},{"value":"/ * If the slice contains an invalid bit pattern for `T`","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":29655,"byte_end":29713,"line_start":233,"line_end":233,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":29714,"byte_end":29723,"line_start":234,"line_end":234,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":120},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":30498,"byte_end":30506,"line_start":257,"line_end":257,"column_start":8,"column_end":16},"name":"try_cast","qualname":"::checked::try_cast","value":"pub fn try_cast<A: NoUninit, B: CheckedBitPattern>(A)\n-> Result<B, CheckedCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to cast `T` into `U`.","sig":null,"attributes":[{"value":"/ Try to cast `T` into `U`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":30046,"byte_end":30075,"line_start":245,"line_end":245,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":30076,"byte_end":30079,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ Note that for this particular type of cast, alignment isn't a factor. The","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":30080,"byte_end":30157,"line_start":247,"line_end":247,"column_start":1,"column_end":78}},{"value":"/ input value is semantically copied into the function and then returned to a","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":30158,"byte_end":30237,"line_start":248,"line_end":248,"column_start":1,"column_end":80}},{"value":"/ new memory location which will have whatever the required alignment of the","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":30238,"byte_end":30316,"line_start":249,"line_end":249,"column_start":1,"column_end":79}},{"value":"/ output type is.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":30317,"byte_end":30336,"line_start":250,"line_end":250,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":30337,"byte_end":30340,"line_start":251,"line_end":251,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":30341,"byte_end":30355,"line_start":252,"line_end":252,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":30356,"byte_end":30359,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ * If the types don't have the same size this fails.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":30360,"byte_end":30415,"line_start":254,"line_end":254,"column_start":1,"column_end":56}},{"value":"/ * If `a` contains an invalid bit pattern for `B` this fails.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":30416,"byte_end":30480,"line_start":255,"line_end":255,"column_start":1,"column_end":65}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":30481,"byte_end":30490,"line_start":256,"line_end":256,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":31050,"byte_end":31062,"line_start":277,"line_end":277,"column_start":8,"column_end":20},"name":"try_cast_ref","qualname":"::checked::try_cast_ref","value":"pub fn try_cast_ref<A: NoUninit, B: CheckedBitPattern>(&A)\n-> Result<&B, CheckedCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&T` into `&U`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":30792,"byte_end":30828,"line_start":269,"line_end":269,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":30829,"byte_end":30832,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":30833,"byte_end":30847,"line_start":271,"line_end":271,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":30848,"byte_end":30851,"line_start":272,"line_end":272,"column_start":1,"column_end":4}},{"value":"/ * If the reference isn't aligned in the new type","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":30852,"byte_end":30904,"line_start":273,"line_end":273,"column_start":1,"column_end":53}},{"value":"/ * If the source type and target type aren't the same size.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":30905,"byte_end":30967,"line_start":274,"line_end":274,"column_start":1,"column_end":63}},{"value":"/ * If `a` contains an invalid bit pattern for `B` this fails.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":30968,"byte_end":31032,"line_start":275,"line_end":275,"column_start":1,"column_end":65}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":31033,"byte_end":31042,"line_start":276,"line_end":276,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":126},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":31504,"byte_end":31516,"line_start":293,"line_end":293,"column_start":8,"column_end":20},"name":"try_cast_mut","qualname":"::checked::try_cast_mut","value":"pub fn try_cast_mut<A: NoUninit + AnyBitPattern, B: CheckedBitPattern +\n                    NoUninit>(&mut A) -> Result<&mut B, CheckedCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&mut T` into `&mut U`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":31398,"byte_end":31442,"line_start":289,"line_end":289,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":31443,"byte_end":31446,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ As [`checked_cast_ref`], but `mut`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":31447,"byte_end":31486,"line_start":291,"line_end":291,"column_start":1,"column_end":40}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":31487,"byte_end":31496,"line_start":292,"line_end":292,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":129},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":32746,"byte_end":32760,"line_start":322,"line_end":322,"column_start":8,"column_end":22},"name":"try_cast_slice","qualname":"::checked::try_cast_slice","value":"pub fn try_cast_slice<A: NoUninit, B: CheckedBitPattern>(&[A])\n-> Result<&[B], CheckedCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&[A]` into `&[B]` (possibly with a change in length).","sig":null,"attributes":[{"value":"/ Try to convert `&[A]` into `&[B]` (possibly with a change in length).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":31887,"byte_end":31960,"line_start":305,"line_end":305,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":31961,"byte_end":31964,"line_start":306,"line_end":306,"column_start":1,"column_end":4}},{"value":"/ * `input.as_ptr() as usize == output.as_ptr() as usize`","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":31965,"byte_end":32024,"line_start":307,"line_end":307,"column_start":1,"column_end":60}},{"value":"/ * `input.len() * size_of::<A>() == output.len() * size_of::<B>()`","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":32025,"byte_end":32094,"line_start":308,"line_end":308,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":32095,"byte_end":32098,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":32099,"byte_end":32113,"line_start":310,"line_end":310,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":32114,"byte_end":32117,"line_start":311,"line_end":311,"column_start":1,"column_end":4}},{"value":"/ * If the target type has a greater alignment requirement and the input slice","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":32118,"byte_end":32198,"line_start":312,"line_end":312,"column_start":1,"column_end":81}},{"value":"/   isn't aligned.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":32199,"byte_end":32219,"line_start":313,"line_end":313,"column_start":1,"column_end":21}},{"value":"/ * If the target element type is a different size from the current element","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":32220,"byte_end":32297,"line_start":314,"line_end":314,"column_start":1,"column_end":78}},{"value":"/   type, and the output slice wouldn't be a whole number of elements when","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":32298,"byte_end":32374,"line_start":315,"line_end":315,"column_start":1,"column_end":77}},{"value":"/   accounting for the size change (eg: 3 `u16` values is 1.5 `u32` values, so","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":32375,"byte_end":32455,"line_start":316,"line_end":316,"column_start":1,"column_end":81}},{"value":"/   that's a failure).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":32456,"byte_end":32480,"line_start":317,"line_end":317,"column_start":1,"column_end":25}},{"value":"/ * Similarly, you can't convert between a [ZST](https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts)","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":32481,"byte_end":32606,"line_start":318,"line_end":318,"column_start":1,"column_end":126}},{"value":"/   and a non-ZST.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":32607,"byte_end":32627,"line_start":319,"line_end":319,"column_start":1,"column_end":21}},{"value":"/ * If any element of the converted slice would contain an invalid bit pattern for `B` this fails.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":32628,"byte_end":32728,"line_start":320,"line_end":320,"column_start":1,"column_end":101}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":32729,"byte_end":32738,"line_start":321,"line_end":321,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":133},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":33288,"byte_end":33306,"line_start":341,"line_end":341,"column_start":8,"column_end":26},"name":"try_cast_slice_mut","qualname":"::checked::try_cast_slice_mut","value":"pub fn try_cast_slice_mut<A: NoUninit + AnyBitPattern, B: CheckedBitPattern +\n                          NoUninit>(&mut [A])\n-> Result<&mut [B], CheckedCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in\n length).","sig":null,"attributes":[{"value":"/ Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":33138,"byte_end":33210,"line_start":336,"line_end":336,"column_start":1,"column_end":73}},{"value":"/ length).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":33211,"byte_end":33223,"line_start":337,"line_end":337,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":33224,"byte_end":33227,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ As [`checked_cast_slice`], but `&mut`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":33228,"byte_end":33270,"line_start":339,"line_end":339,"column_start":1,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":33271,"byte_end":33280,"line_start":340,"line_end":340,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":137},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":33855,"byte_end":33865,"line_start":361,"line_end":361,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::checked::from_bytes","value":"pub fn from_bytes<T: CheckedBitPattern>(&[u8]) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":33725,"byte_end":33759,"line_start":355,"line_end":355,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":33760,"byte_end":33763,"line_start":356,"line_end":356,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":33764,"byte_end":33777,"line_start":357,"line_end":357,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":33778,"byte_end":33781,"line_start":358,"line_end":358,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes`] but will panic on error.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":33782,"byte_end":33837,"line_start":359,"line_end":359,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":33838,"byte_end":33847,"line_start":360,"line_end":360,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":139},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":34152,"byte_end":34166,"line_start":374,"line_end":374,"column_start":8,"column_end":22},"name":"from_bytes_mut","qualname":"::checked::from_bytes_mut","value":"pub fn from_bytes_mut<T: NoUninit + CheckedBitPattern>(&mut [u8]) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":34010,"byte_end":34052,"line_start":368,"line_end":368,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":34053,"byte_end":34056,"line_start":369,"line_end":369,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":34057,"byte_end":34070,"line_start":370,"line_end":370,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":34071,"byte_end":34074,"line_start":371,"line_end":371,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes_mut`] but will panic on error.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":34075,"byte_end":34134,"line_start":372,"line_end":372,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":34135,"byte_end":34144,"line_start":373,"line_end":373,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":141},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":34482,"byte_end":34500,"line_start":386,"line_end":386,"column_start":8,"column_end":26},"name":"pod_read_unaligned","qualname":"::checked::pod_read_unaligned","value":"pub fn pod_read_unaligned<T: AnyBitPattern>(&[u8]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Reads the slice into a `T` value.","sig":null,"attributes":[{"value":"/ Reads the slice into a `T` value.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":34338,"byte_end":34375,"line_start":381,"line_end":381,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":34376,"byte_end":34379,"line_start":382,"line_end":382,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":34380,"byte_end":34393,"line_start":383,"line_end":383,"column_start":1,"column_end":14}},{"value":"/ * This is like `try_pod_read_unaligned` but will panic on failure.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":34394,"byte_end":34464,"line_start":384,"line_end":384,"column_start":1,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":34465,"byte_end":34474,"line_start":385,"line_end":385,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":143},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":34803,"byte_end":34807,"line_start":399,"line_end":399,"column_start":8,"column_end":12},"name":"cast","qualname":"::checked::cast","value":"pub fn cast<A: NoUninit, B: CheckedBitPattern>(A) -> B","parent":null,"children":[],"decl_id":null,"docs":" Cast `T` into `U`","sig":null,"attributes":[{"value":"/ Cast `T` into `U`","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":34664,"byte_end":34685,"line_start":393,"line_end":393,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":34686,"byte_end":34689,"line_start":394,"line_end":394,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":34690,"byte_end":34703,"line_start":395,"line_end":395,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":34704,"byte_end":34707,"line_start":396,"line_end":396,"column_start":1,"column_end":4}},{"value":"/ * This is like [`try_cast`](try_cast), but will panic on a size mismatch.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":34708,"byte_end":34785,"line_start":397,"line_end":397,"column_start":1,"column_end":78}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":34786,"byte_end":34795,"line_start":398,"line_end":398,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":146},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":35074,"byte_end":35082,"line_start":412,"line_end":412,"column_start":8,"column_end":16},"name":"cast_mut","qualname":"::checked::cast_mut","value":"pub fn cast_mut<A: NoUninit + AnyBitPattern, B: NoUninit +\n                CheckedBitPattern>(&mut A) -> &mut B","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Cast `&mut T` into `&mut U`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":34948,"byte_end":34980,"line_start":406,"line_end":406,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":34981,"byte_end":34984,"line_start":407,"line_end":407,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":34985,"byte_end":34998,"line_start":408,"line_end":408,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":34999,"byte_end":35002,"line_start":409,"line_end":409,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_mut`] but will panic on error.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":35003,"byte_end":35056,"line_start":410,"line_end":410,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":35057,"byte_end":35066,"line_start":411,"line_end":411,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":35386,"byte_end":35394,"line_start":425,"line_end":425,"column_start":8,"column_end":16},"name":"cast_ref","qualname":"::checked::cast_ref","value":"pub fn cast_ref<A: NoUninit, B: CheckedBitPattern>(&A) -> &B","parent":null,"children":[],"decl_id":null,"docs":" Cast `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Cast `&T` into `&U`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":35268,"byte_end":35292,"line_start":419,"line_end":419,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":35293,"byte_end":35296,"line_start":420,"line_end":420,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":35297,"byte_end":35310,"line_start":421,"line_end":421,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":35311,"byte_end":35314,"line_start":422,"line_end":422,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_ref`] but will panic on error.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":35315,"byte_end":35368,"line_start":423,"line_end":423,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":35369,"byte_end":35378,"line_start":424,"line_end":424,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":152},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":35669,"byte_end":35679,"line_start":438,"line_end":438,"column_start":8,"column_end":18},"name":"cast_slice","qualname":"::checked::cast_slice","value":"pub fn cast_slice<A: NoUninit, B: CheckedBitPattern>(&[A]) -> &[B]","parent":null,"children":[],"decl_id":null,"docs":" Cast `&[A]` into `&[B]`.","sig":null,"attributes":[{"value":"/ Cast `&[A]` into `&[B]`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":35545,"byte_end":35573,"line_start":432,"line_end":432,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":35574,"byte_end":35577,"line_start":433,"line_end":433,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":35578,"byte_end":35591,"line_start":434,"line_end":434,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":35592,"byte_end":35595,"line_start":435,"line_end":435,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice`] but will panic on error.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":35596,"byte_end":35651,"line_start":436,"line_end":436,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":35652,"byte_end":35661,"line_start":437,"line_end":437,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":155},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":35974,"byte_end":35988,"line_start":451,"line_end":451,"column_start":8,"column_end":22},"name":"cast_slice_mut","qualname":"::checked::cast_slice_mut","value":"pub fn cast_slice_mut<A: NoUninit + AnyBitPattern, B: NoUninit +\n                      CheckedBitPattern>(&mut [A]) -> &mut [B]","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut [T]` into `&mut [U]`.","sig":null,"attributes":[{"value":"/ Cast `&mut [T]` into `&mut [U]`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":35838,"byte_end":35874,"line_start":445,"line_end":445,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":35875,"byte_end":35878,"line_start":446,"line_end":446,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":35879,"byte_end":35892,"line_start":447,"line_end":447,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":35893,"byte_end":35896,"line_start":448,"line_end":448,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice_mut`] but will panic on error.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":35897,"byte_end":35956,"line_start":449,"line_end":449,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":35957,"byte_end":35966,"line_start":450,"line_end":450,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":218},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":49165,"byte_end":49173,"line_start":15,"line_end":15,"column_start":18,"column_end":26},"name":"Zeroable","qualname":"::zeroable::Zeroable","value":"Zeroable: Sized","parent":null,"children":[{"krate":0,"index":219}],"decl_id":null,"docs":" Trait for types that can be safely created with\n [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Trait for types that can be safely created with","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":48707,"byte_end":48758,"line_start":3,"line_end":3,"column_start":1,"column_end":52}},{"value":"/ [`zeroed`](core::mem::zeroed).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":48759,"byte_end":48793,"line_start":4,"line_end":4,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":48794,"byte_end":48797,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ An all-zeroes value may or may not be the same value as the","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":48798,"byte_end":48861,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/ [Default](core::default::Default) value of the type.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":48862,"byte_end":48918,"line_start":7,"line_end":7,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":48919,"byte_end":48922,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":48923,"byte_end":48936,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":48937,"byte_end":48940,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * Your type must be inhabited (eg: no","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":48941,"byte_end":48982,"line_start":11,"line_end":11,"column_start":1,"column_end":42}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":48983,"byte_end":49030,"line_start":12,"line_end":12,"column_start":1,"column_end":48}},{"value":"/ * Your type must be allowed to be an \"all zeroes\" bit pattern (eg: no","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":49031,"byte_end":49104,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/   [`NonNull<T>`](core::ptr::NonNull)).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":49105,"byte_end":49147,"line_start":14,"line_end":14,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":49453,"byte_end":49459,"line_start":22,"line_end":22,"column_start":6,"column_end":12},"name":"zeroed","qualname":"::zeroable::Zeroable::zeroed","value":"pub fn zeroed() -> Self","parent":{"krate":0,"index":218},"children":[],"decl_id":null,"docs":" Calls [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Calls [`zeroed`](core::mem::zeroed).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":49185,"byte_end":49225,"line_start":16,"line_end":16,"column_start":3,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":49228,"byte_end":49231,"line_start":17,"line_end":17,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `MyType::zeroed()` in your","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":49234,"byte_end":49309,"line_start":18,"line_end":18,"column_start":3,"column_end":78}},{"value":"/ code. It is a contract of this trait that if you implement it on your type","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":49312,"byte_end":49390,"line_start":19,"line_end":19,"column_start":3,"column_end":81}},{"value":"/ you **must not** override this method.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":49393,"byte_end":49435,"line_start":20,"line_end":20,"column_start":3,"column_end":45}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":49438,"byte_end":49447,"line_start":21,"line_end":21,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":315},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":66907,"byte_end":66910,"line_start":29,"line_end":29,"column_start":18,"column_end":21},"name":"Pod","qualname":"::pod::Pod","value":"Pod: Zeroable + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\".","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\".","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":65599,"byte_end":65637,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":65638,"byte_end":65641,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The point of this trait is that once something is marked \"plain old data\"","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":65642,"byte_end":65719,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ you can really go to town with the bit fiddling and bit casting. Therefore,","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":65720,"byte_end":65799,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ it's a relatively strong claim to make about a type. Do not add this to your","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":65800,"byte_end":65880,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ type casually.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":65881,"byte_end":65899,"line_start":8,"line_end":8,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":65900,"byte_end":65903,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ **Reminder:** The results of casting around bytes between data types are","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":65904,"byte_end":65980,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ _endian dependant_. Little-endian machines are the most common, but","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":65981,"byte_end":66052,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/ big-endian machines do exist (and big-endian is also used for \"network","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":66053,"byte_end":66127,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ order\" bytes).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":66128,"byte_end":66146,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":66147,"byte_end":66150,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":66151,"byte_end":66164,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":66165,"byte_end":66168,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":66169,"byte_end":66209,"line_start":17,"line_end":17,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":66210,"byte_end":66257,"line_start":18,"line_end":18,"column_start":1,"column_end":48}},{"value":"/ * The type must allow any bit pattern (eg: no `bool` or `char`, which have","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":66258,"byte_end":66336,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/   illegal bit patterns).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":66337,"byte_end":66365,"line_start":20,"line_end":20,"column_start":1,"column_end":29}},{"value":"/ * The type must not contain any uninit (or padding) bytes, either in the middle or on","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":66366,"byte_end":66455,"line_start":21,"line_end":21,"column_start":1,"column_end":90}},{"value":"/   the end (eg: no `#[repr(C)] struct Foo(u8, u16)`, which has padding in the","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":66456,"byte_end":66536,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/   middle, and also no `#[repr(C)] struct Foo(u16, u8)`, which has padding on","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":66537,"byte_end":66617,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/   the end).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":66618,"byte_end":66633,"line_start":24,"line_end":24,"column_start":1,"column_end":16}},{"value":"/ * The type needs to have all fields also be `Pod`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":66634,"byte_end":66688,"line_start":25,"line_end":25,"column_start":1,"column_end":55}},{"value":"/ * The type needs to be `repr(C)` or `repr(transparent)`. In the case of","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":66689,"byte_end":66764,"line_start":26,"line_end":26,"column_start":1,"column_end":76}},{"value":"/   `repr(C)`, the `packed` and `align` repr modifiers can be used as long as","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":66765,"byte_end":66844,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/   all other rules end up being followed.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":66845,"byte_end":66889,"line_start":28,"line_end":28,"column_start":1,"column_end":45}}]},{"kind":"Trait","id":{"krate":0,"index":361},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":83799,"byte_end":83807,"line_start":46,"line_end":46,"column_start":18,"column_end":26},"name":"NoUninit","qualname":"::no_uninit::NoUninit","value":"NoUninit: Sized + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\" types with no uninit (or padding) bytes.","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\" types with no uninit (or padding) bytes.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":81313,"byte_end":81391,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":81392,"byte_end":81395,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The requirements for this is very similar to [`Pod`],","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":81396,"byte_end":81453,"line_start":5,"line_end":5,"column_start":1,"column_end":58}},{"value":"/ except that it doesn't require that all bit patterns of the type are valid, i.e.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":81454,"byte_end":81538,"line_start":6,"line_end":6,"column_start":1,"column_end":85}},{"value":"/ it does not require the type to be [`Zeroable`][crate::Zeroable].","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":81539,"byte_end":81608,"line_start":7,"line_end":7,"column_start":1,"column_end":70}},{"value":"/ This limits what you can do with a type of this kind, but also broadens the","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":81609,"byte_end":81688,"line_start":8,"line_end":8,"column_start":1,"column_end":80}},{"value":"/ included types to things like C-style enums. Notably, you can only cast from","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":81689,"byte_end":81769,"line_start":9,"line_end":9,"column_start":1,"column_end":81}},{"value":"/ *immutable* references to a [`NoUninit`] type into *immutable* references of any other","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":81770,"byte_end":81860,"line_start":10,"line_end":10,"column_start":1,"column_end":91}},{"value":"/ type, no casting of mutable references or mutable references to slices etc.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":81861,"byte_end":81940,"line_start":11,"line_end":11,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":81941,"byte_end":81944,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ [`Pod`] is a subset of [`NoUninit`], meaning that any `T: Pod` is also","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":81945,"byte_end":82019,"line_start":13,"line_end":13,"column_start":1,"column_end":75}},{"value":"/ [`NoUninit`] but any `T: NoUninit` is not necessarily [`Pod`]. If possible,","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":82020,"byte_end":82099,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"/ prefer implementing [`Pod`] directly. To get more [`Pod`]-like functionality for","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":82100,"byte_end":82184,"line_start":15,"line_end":15,"column_start":1,"column_end":85}},{"value":"/ a type that is only [`NoUninit`], consider also implementing [`CheckedBitPattern`][crate::CheckedBitPattern].","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":82185,"byte_end":82298,"line_start":16,"line_end":16,"column_start":1,"column_end":114}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":82299,"byte_end":82302,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ # Derive","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":82303,"byte_end":82315,"line_start":18,"line_end":18,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":82316,"byte_end":82319,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ A `#[derive(NoUninit)]` macro is provided under the `derive` feature flag which will","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":82320,"byte_end":82408,"line_start":20,"line_end":20,"column_start":1,"column_end":89}},{"value":"/ automatically validate the requirements of this trait and implement the","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":82409,"byte_end":82484,"line_start":21,"line_end":21,"column_start":1,"column_end":76}},{"value":"/ trait for you for both enums and structs. This is the recommended method for","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":82485,"byte_end":82565,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/ implementing the trait, however it's also possible to do manually. If you","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":82566,"byte_end":82643,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"/ implement it manually, you *must* carefully follow the below safety rules.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":82644,"byte_end":82722,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":82723,"byte_end":82726,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":82727,"byte_end":82739,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":82740,"byte_end":82743,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ The same as [`Pod`] except we disregard the rule about it must","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":82744,"byte_end":82810,"line_start":28,"line_end":28,"column_start":1,"column_end":67}},{"value":"/ allow any bit pattern (i.e. it does not need to be [`Zeroable`][crate::Zeroable]).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":82811,"byte_end":82897,"line_start":29,"line_end":29,"column_start":1,"column_end":87}},{"value":"/ Still, this is a quite strong guarantee about a type, so *be careful* whem","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":82898,"byte_end":82976,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/ implementing it manually.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":82977,"byte_end":83006,"line_start":31,"line_end":31,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":83007,"byte_end":83010,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":83011,"byte_end":83051,"line_start":33,"line_end":33,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":83052,"byte_end":83099,"line_start":34,"line_end":34,"column_start":1,"column_end":48}},{"value":"/ * The type must not contain any uninit (or padding) bytes, either in the middle or on","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":83100,"byte_end":83189,"line_start":35,"line_end":35,"column_start":1,"column_end":90}},{"value":"/   the end (eg: no `#[repr(C)] struct Foo(u8, u16)`, which has padding in the","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":83190,"byte_end":83270,"line_start":36,"line_end":36,"column_start":1,"column_end":81}},{"value":"/   middle, and also no `#[repr(C)] struct Foo(u16, u8)`, which has padding on","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":83271,"byte_end":83351,"line_start":37,"line_end":37,"column_start":1,"column_end":81}},{"value":"/   the end).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":83352,"byte_end":83367,"line_start":38,"line_end":38,"column_start":1,"column_end":16}},{"value":"/ * Structs need to have all fields also be `NoUninit`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":83368,"byte_end":83425,"line_start":39,"line_end":39,"column_start":1,"column_end":58}},{"value":"/ * Structs need to be `repr(C)` or `repr(transparent)`. In the case of","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":83426,"byte_end":83499,"line_start":40,"line_end":40,"column_start":1,"column_end":74}},{"value":"/   `repr(C)`, the `packed` and `align` repr modifiers can be used as long as","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":83500,"byte_end":83579,"line_start":41,"line_end":41,"column_start":1,"column_end":80}},{"value":"/   all other rules end up being followed.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":83580,"byte_end":83624,"line_start":42,"line_end":42,"column_start":1,"column_end":45}},{"value":"/ * Enums need to have an explicit `#[repr(Int)]`","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":83625,"byte_end":83676,"line_start":43,"line_end":43,"column_start":1,"column_end":52}},{"value":"/ * Enums must have only fieldless variants","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":83677,"byte_end":83722,"line_start":44,"line_end":44,"column_start":1,"column_end":46}},{"value":"/ * There's probably more, don't mess it up (I mean it).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":83723,"byte_end":83781,"line_start":45,"line_end":45,"column_start":1,"column_end":59}}]},{"kind":"Trait","id":{"krate":0,"index":369},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":86978,"byte_end":86988,"line_start":78,"line_end":78,"column_start":18,"column_end":28},"name":"Contiguous","qualname":"::contiguous::Contiguous","value":"Contiguous: Copy + 'static","parent":null,"children":[{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374}],"decl_id":null,"docs":" A trait indicating that:","sig":null,"attributes":[{"value":"/ A trait indicating that:","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":84010,"byte_end":84038,"line_start":3,"line_end":3,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":84039,"byte_end":84042,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ 1. A type has an equivalent representation to some known integral type.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":84043,"byte_end":84118,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/ 2. All instances of this type fall in a fixed range of values.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":84119,"byte_end":84185,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ 3. Within that range, there are no gaps.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":84186,"byte_end":84230,"line_start":7,"line_end":7,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":84231,"byte_end":84234,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This is generally useful for fieldless enums (aka \"c-style\" enums), however","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":84235,"byte_end":84314,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/ it's important that it only be used for those with an explicit `#[repr]`, as","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":84315,"byte_end":84395,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/ `#[repr(Rust)]` fieldess enums have an unspecified layout.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":84396,"byte_end":84458,"line_start":11,"line_end":11,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":84459,"byte_end":84462,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Additionally, you shouldn't assume that all implementations are enums. Any","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":84463,"byte_end":84541,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/ type which meets the requirements above while following the rules under","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":84542,"byte_end":84617,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"/ \"Safety\" below is valid.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":84618,"byte_end":84646,"line_start":15,"line_end":15,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":84647,"byte_end":84650,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":84651,"byte_end":84664,"line_start":17,"line_end":17,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":84665,"byte_end":84668,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":84669,"byte_end":84676,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ # use bytemuck::Contiguous;","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":84677,"byte_end":84708,"line_start":20,"line_end":20,"column_start":1,"column_end":32}},{"value":"/ #[repr(u8)]","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":84709,"byte_end":84724,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/ #[derive(Debug, Copy, Clone, PartialEq)]","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":84725,"byte_end":84769,"line_start":22,"line_end":22,"column_start":1,"column_end":45}},{"value":"/ enum Foo {","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":84770,"byte_end":84784,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/   A = 0,","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":84785,"byte_end":84797,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/   B = 1,","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":84798,"byte_end":84810,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/   C = 2,","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":84811,"byte_end":84823,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/   D = 3,","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":84824,"byte_end":84836,"line_start":27,"line_end":27,"column_start":1,"column_end":13}},{"value":"/   E = 4,","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":84837,"byte_end":84849,"line_start":28,"line_end":28,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":84850,"byte_end":84855,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/ unsafe impl Contiguous for Foo {","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":84856,"byte_end":84892,"line_start":30,"line_end":30,"column_start":1,"column_end":37}},{"value":"/   type Int = u8;","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":84893,"byte_end":84913,"line_start":31,"line_end":31,"column_start":1,"column_end":21}},{"value":"/   const MIN_VALUE: u8 = Foo::A as u8;","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":84914,"byte_end":84955,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"/   const MAX_VALUE: u8 = Foo::E as u8;","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":84956,"byte_end":84997,"line_start":33,"line_end":33,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":84998,"byte_end":85003,"line_start":34,"line_end":34,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(Foo::from_integer(3).unwrap(), Foo::D);","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":85004,"byte_end":85058,"line_start":35,"line_end":35,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(Foo::from_integer(8), None);","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":85059,"byte_end":85102,"line_start":36,"line_end":36,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(Foo::C.into_integer(), 2);","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":85103,"byte_end":85144,"line_start":37,"line_end":37,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":85145,"byte_end":85152,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":85153,"byte_end":85165,"line_start":39,"line_end":39,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":85166,"byte_end":85169,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ This is an unsafe trait, and incorrectly implementing it is undefined","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":85170,"byte_end":85243,"line_start":41,"line_end":41,"column_start":1,"column_end":74}},{"value":"/ behavior.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":85244,"byte_end":85257,"line_start":42,"line_end":42,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":85258,"byte_end":85261,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Informally, by implementing it, you're asserting that `C` is identical to","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":85262,"byte_end":85339,"line_start":44,"line_end":44,"column_start":1,"column_end":78}},{"value":"/ the integral type `C::Int`, and that every `C` falls between `C::MIN_VALUE`","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":85340,"byte_end":85419,"line_start":45,"line_end":45,"column_start":1,"column_end":80}},{"value":"/ and `C::MAX_VALUE` exactly once, without any gaps.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":85420,"byte_end":85474,"line_start":46,"line_end":46,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":85475,"byte_end":85478,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Precisely, the guarantees you must uphold when implementing `Contiguous` for","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":85479,"byte_end":85559,"line_start":48,"line_end":48,"column_start":1,"column_end":81}},{"value":"/ some type `C` are:","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":85560,"byte_end":85582,"line_start":49,"line_end":49,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":85583,"byte_end":85586,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ 1. The size of `C` and `C::Int` must be the same, and neither may be a ZST.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":85587,"byte_end":85667,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/    (Note: alignment is explicitly allowed to differ)","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":85668,"byte_end":85724,"line_start":52,"line_end":52,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":85725,"byte_end":85728,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ 2. `C::Int` must be a primitive integer, and not a wrapper type. In the","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":85729,"byte_end":85804,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"/    future, this may be lifted to include cases where the behavior is","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":85805,"byte_end":85877,"line_start":55,"line_end":55,"column_start":1,"column_end":73}},{"value":"/    identical for a relevant set of traits (Ord, arithmetic, ...).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":85878,"byte_end":85947,"line_start":56,"line_end":56,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":85948,"byte_end":85951,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ 3. All `C::Int`s which are in the *inclusive* range between `C::MIN_VALUE`","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":85952,"byte_end":86030,"line_start":58,"line_end":58,"column_start":1,"column_end":79}},{"value":"/    and `C::MAX_VALUE` are bitwise identical to unique valid instances of","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":86031,"byte_end":86107,"line_start":59,"line_end":59,"column_start":1,"column_end":77}},{"value":"/    `C`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":86108,"byte_end":86119,"line_start":60,"line_end":60,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":86120,"byte_end":86123,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ 4. There exist no instances of `C` such that their bitpatterns, when","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":86124,"byte_end":86196,"line_start":62,"line_end":62,"column_start":1,"column_end":73}},{"value":"/    interpreted as instances of `C::Int`, fall outside of the `MAX_VALUE` /","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":86197,"byte_end":86275,"line_start":63,"line_end":63,"column_start":1,"column_end":79}},{"value":"/    `MIN_VALUE` range -- It is legal for unsafe code to assume that if it","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":86276,"byte_end":86352,"line_start":64,"line_end":64,"column_start":1,"column_end":77}},{"value":"/    gets a `C` that implements `Contiguous`, it is in the appropriate range.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":86353,"byte_end":86432,"line_start":65,"line_end":65,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":86433,"byte_end":86436,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ 5. Finally, you promise not to provide overridden implementations of","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":86437,"byte_end":86509,"line_start":67,"line_end":67,"column_start":1,"column_end":73}},{"value":"/    `Contiguous::from_integer` and `Contiguous::into_integer`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":86510,"byte_end":86575,"line_start":68,"line_end":68,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":86576,"byte_end":86579,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ For clarity, the following rules could be derived from the above, but are","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":86580,"byte_end":86657,"line_start":70,"line_end":70,"column_start":1,"column_end":78}},{"value":"/ listed explicitly:","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":86658,"byte_end":86680,"line_start":71,"line_end":71,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":86681,"byte_end":86684,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ - `C::MAX_VALUE` must be greater or equal to `C::MIN_VALUE` (therefore, `C`","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":86685,"byte_end":86764,"line_start":73,"line_end":73,"column_start":1,"column_end":80}},{"value":"/   must be an inhabited type).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":86765,"byte_end":86798,"line_start":74,"line_end":74,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":86799,"byte_end":86802,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ - There exist no two values between `MIN_VALUE` and `MAX_VALUE` such that","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":86803,"byte_end":86880,"line_start":76,"line_end":76,"column_start":1,"column_end":78}},{"value":"/   when interpreted as a `C` they are considered identical (by, say, match).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":86881,"byte_end":86960,"line_start":77,"line_end":77,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":370},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":87813,"byte_end":87816,"line_start":96,"line_end":96,"column_start":8,"column_end":11},"name":"Int","qualname":"::contiguous::Contiguous::Int","value":"type Int: Copy + Ord;","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" The primitive integer type with an identical representation to this\n type.","sig":null,"attributes":[{"value":"/ The primitive integer type with an identical representation to this","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":87009,"byte_end":87080,"line_start":79,"line_end":79,"column_start":3,"column_end":74}},{"value":"/ type.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":87083,"byte_end":87092,"line_start":80,"line_end":80,"column_start":3,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":87095,"byte_end":87098,"line_start":81,"line_end":81,"column_start":3,"column_end":6}},{"value":"/ Contiguous is broadly intended for use with fieldless enums, and for","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":87101,"byte_end":87173,"line_start":82,"line_end":82,"column_start":3,"column_end":75}},{"value":"/ these the correct integer type is easy: The enum should have a","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":87176,"byte_end":87242,"line_start":83,"line_end":83,"column_start":3,"column_end":69}},{"value":"/ `#[repr(Int)]` or `#[repr(C)]` attribute, (if it does not, it is","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":87245,"byte_end":87313,"line_start":84,"line_end":84,"column_start":3,"column_end":71}},{"value":"/ *unsound* to implement `Contiguous`!).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":87316,"byte_end":87358,"line_start":85,"line_end":85,"column_start":3,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":87361,"byte_end":87364,"line_start":86,"line_end":86,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(Int)]`, use the listed `Int`. e.g. `#[repr(u8)]` should use","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":87367,"byte_end":87444,"line_start":87,"line_end":87,"column_start":3,"column_end":80}},{"value":"/   `type Int = u8`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":87447,"byte_end":87469,"line_start":88,"line_end":88,"column_start":3,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":87472,"byte_end":87475,"line_start":89,"line_end":89,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(C)]`, use whichever type the C compiler will use to","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":87478,"byte_end":87547,"line_start":90,"line_end":90,"column_start":3,"column_end":72}},{"value":"/   represent the given enum. This is usually `c_int` (from `std::os::raw`","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":87550,"byte_end":87626,"line_start":91,"line_end":91,"column_start":3,"column_end":79}},{"value":"/   or `libc`), but it's up to you to make the determination as the","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":87629,"byte_end":87698,"line_start":92,"line_end":92,"column_start":3,"column_end":72}},{"value":"/   implementer of the unsafe trait.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":87701,"byte_end":87739,"line_start":93,"line_end":93,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":87742,"byte_end":87745,"line_start":94,"line_end":94,"column_start":3,"column_end":6}},{"value":"/ For precise rules, see the list under \"Safety\" above.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":87748,"byte_end":87805,"line_start":95,"line_end":95,"column_start":3,"column_end":60}}]},{"kind":"Const","id":{"krate":0,"index":371},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":87907,"byte_end":87916,"line_start":99,"line_end":99,"column_start":9,"column_end":18},"name":"MAX_VALUE","qualname":"::contiguous::Contiguous::MAX_VALUE","value":"Self::Int","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" The upper *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The upper *inclusive* bound for valid instances of this type.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":87833,"byte_end":87898,"line_start":98,"line_end":98,"column_start":3,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":372},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":88006,"byte_end":88015,"line_start":102,"line_end":102,"column_start":9,"column_end":18},"name":"MIN_VALUE","qualname":"::contiguous::Contiguous::MIN_VALUE","value":"Self::Int","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" The lower *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The lower *inclusive* bound for valid instances of this type.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":87932,"byte_end":87997,"line_start":101,"line_end":101,"column_start":3,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":88680,"byte_end":88692,"line_start":119,"line_end":119,"column_start":6,"column_end":18},"name":"from_integer","qualname":"::contiguous::Contiguous::from_integer","value":"pub fn from_integer(Self::Int) -> Option<Self>","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" If `value` is within the range for valid instances of this type,\n returns `Some(converted_value)`, otherwise, returns `None`.","sig":null,"attributes":[{"value":"/ If `value` is within the range for valid instances of this type,","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":88031,"byte_end":88099,"line_start":104,"line_end":104,"column_start":3,"column_end":71}},{"value":"/ returns `Some(converted_value)`, otherwise, returns `None`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":88102,"byte_end":88165,"line_start":105,"line_end":105,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":88168,"byte_end":88171,"line_start":106,"line_end":106,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":88174,"byte_end":88248,"line_start":107,"line_end":107,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":88251,"byte_end":88318,"line_start":108,"line_end":108,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":88321,"byte_end":88389,"line_start":109,"line_end":109,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":88392,"byte_end":88395,"line_start":110,"line_end":110,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":88398,"byte_end":88410,"line_start":111,"line_end":111,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":88413,"byte_end":88416,"line_start":112,"line_end":112,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":88419,"byte_end":88492,"line_start":113,"line_end":113,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":88495,"byte_end":88541,"line_start":114,"line_end":114,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":88544,"byte_end":88547,"line_start":115,"line_end":115,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":88550,"byte_end":88624,"line_start":116,"line_end":116,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":88627,"byte_end":88662,"line_start":117,"line_end":117,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":88665,"byte_end":88674,"line_start":118,"line_end":118,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":90215,"byte_end":90227,"line_start":154,"line_end":154,"column_start":6,"column_end":18},"name":"into_integer","qualname":"::contiguous::Contiguous::into_integer","value":"pub fn into_integer(Self) -> Self::Int","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" Perform the conversion from `C` into the underlying integral type. This\n mostly exists otherwise generic code would need unsafe for the `value as\n integer`","sig":null,"attributes":[{"value":"/ Perform the conversion from `C` into the underlying integral type. This","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":89531,"byte_end":89606,"line_start":138,"line_end":138,"column_start":3,"column_end":78}},{"value":"/ mostly exists otherwise generic code would need unsafe for the `value as","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":89609,"byte_end":89685,"line_start":139,"line_end":139,"column_start":3,"column_end":79}},{"value":"/ integer`","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":89688,"byte_end":89700,"line_start":140,"line_end":140,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":89703,"byte_end":89706,"line_start":141,"line_end":141,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":89709,"byte_end":89783,"line_start":142,"line_end":142,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":89786,"byte_end":89853,"line_start":143,"line_end":143,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":89856,"byte_end":89924,"line_start":144,"line_end":144,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":89927,"byte_end":89930,"line_start":145,"line_end":145,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":89933,"byte_end":89945,"line_start":146,"line_end":146,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":89948,"byte_end":89951,"line_start":147,"line_end":147,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":89954,"byte_end":90027,"line_start":148,"line_end":148,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":90030,"byte_end":90076,"line_start":149,"line_end":149,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":90079,"byte_end":90082,"line_start":150,"line_end":150,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":90085,"byte_end":90159,"line_start":151,"line_end":151,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":90162,"byte_end":90197,"line_start":152,"line_end":152,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":90200,"byte_end":90209,"line_start":153,"line_end":153,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":382},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":100361,"byte_end":100379,"line_start":87,"line_end":87,"column_start":18,"column_end":36},"name":"TransparentWrapper","qualname":"::transparent::TransparentWrapper","value":"TransparentWrapper<Inner: ?Sized>","parent":null,"children":[{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393}],"decl_id":null,"docs":" A trait which indicates that a type is a `#[repr(transparent)]` wrapper\n around the `Inner` value.","sig":null,"attributes":[{"value":"/ A trait which indicates that a type is a `#[repr(transparent)]` wrapper","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":97272,"byte_end":97347,"line_start":3,"line_end":3,"column_start":1,"column_end":76}},{"value":"/ around the `Inner` value.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":97348,"byte_end":97377,"line_start":4,"line_end":4,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":97378,"byte_end":97381,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This allows safely copy transmuting between the `Inner` type and the","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":97382,"byte_end":97454,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ `TransparentWrapper` type. Functions like `wrap_{}` convert from the inner","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":97455,"byte_end":97533,"line_start":7,"line_end":7,"column_start":1,"column_end":79}},{"value":"/ type to the wrapper type and `peel_{}` functions do the inverse conversion","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":97534,"byte_end":97612,"line_start":8,"line_end":8,"column_start":1,"column_end":79}},{"value":"/ from the wrapper type to the inner type. We deliberately do not call the","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":97613,"byte_end":97689,"line_start":9,"line_end":9,"column_start":1,"column_end":77}},{"value":"/ wrapper-removing methods \"unwrap\" because at this point that word is too","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":97690,"byte_end":97766,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ strongly tied to the Option/ Result methods.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":97767,"byte_end":97815,"line_start":11,"line_end":11,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":97816,"byte_end":97819,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":97820,"byte_end":97832,"line_start":13,"line_end":13,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":97833,"byte_end":97836,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The safety contract of `TransparentWrapper` is relatively simple:","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":97837,"byte_end":97906,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":97907,"byte_end":97910,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ For a given `Wrapper` which implements `TransparentWrapper<Inner>`:","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":97911,"byte_end":97982,"line_start":17,"line_end":17,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":97983,"byte_end":97986,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ 1. `Wrapper` must be a wrapper around `Inner` with an identical data","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":97987,"byte_end":98059,"line_start":19,"line_end":19,"column_start":1,"column_end":73}},{"value":"/    representations. This    either means that it must be a","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":98060,"byte_end":98122,"line_start":20,"line_end":20,"column_start":1,"column_end":63}},{"value":"/    `#[repr(transparent)]` struct which    contains a either a field of type","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":98123,"byte_end":98202,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/    `Inner` (or a field of some other    transparent wrapper for `Inner`) as","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":98203,"byte_end":98282,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/    the only non-ZST field.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":98283,"byte_end":98313,"line_start":23,"line_end":23,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":98314,"byte_end":98317,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ 2. Any fields *other* than the `Inner` field must be trivially constructable","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":98318,"byte_end":98398,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/    ZSTs, for example `PhantomData`, `PhantomPinned`, etc.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":98399,"byte_end":98460,"line_start":26,"line_end":26,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":98461,"byte_end":98464,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ 3. The `Wrapper` may not impose additional alignment requirements over","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":98465,"byte_end":98539,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"/    `Inner`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":98540,"byte_end":98555,"line_start":29,"line_end":29,"column_start":1,"column_end":16}},{"value":"/     - Note: this is currently guaranteed by `repr(transparent)`, but there","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":98556,"byte_end":98634,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/       have been discussions of lifting it, so it's stated here explicitly.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":98635,"byte_end":98713,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":98714,"byte_end":98717,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ 4. All functions on `TransparentWrapper` **may not** be overridden.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":98718,"byte_end":98789,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":98790,"byte_end":98793,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ## Caveats","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":98794,"byte_end":98808,"line_start":35,"line_end":35,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":98809,"byte_end":98812,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ If the wrapper imposes additional constraints upon the inner type which are","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":98813,"byte_end":98892,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ required for safety, it's responsible for ensuring those still hold -- this","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":98893,"byte_end":98972,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/ generally requires preventing access to instances of the inner type, as","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":98973,"byte_end":99048,"line_start":39,"line_end":39,"column_start":1,"column_end":76}},{"value":"/ implementing `TransparentWrapper<U> for T` means anybody can call","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":99049,"byte_end":99118,"line_start":40,"line_end":40,"column_start":1,"column_end":70}},{"value":"/ `T::cast_ref(any_instance_of_u)`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":99119,"byte_end":99156,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":99157,"byte_end":99160,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ For example, it would be invalid to implement TransparentWrapper for `str`","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":99161,"byte_end":99239,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ to implement `TransparentWrapper` around `[u8]` because of this.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":99240,"byte_end":99308,"line_start":44,"line_end":44,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":99309,"byte_end":99312,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":99313,"byte_end":99327,"line_start":46,"line_end":46,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":99328,"byte_end":99331,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ ## Basic","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":99332,"byte_end":99344,"line_start":48,"line_end":48,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":99345,"byte_end":99348,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":99349,"byte_end":99356,"line_start":50,"line_end":50,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":99357,"byte_end":99394,"line_start":51,"line_end":51,"column_start":1,"column_end":38}},{"value":"/ # #[derive(Default)]","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":99395,"byte_end":99419,"line_start":52,"line_end":52,"column_start":1,"column_end":25}},{"value":"/ # struct SomeStruct(u32);","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":99420,"byte_end":99449,"line_start":53,"line_end":53,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":99450,"byte_end":99453,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":99454,"byte_end":99478,"line_start":55,"line_end":55,"column_start":1,"column_end":25}},{"value":"/ struct MyWrapper(SomeStruct);","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":99479,"byte_end":99512,"line_start":56,"line_end":56,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":99513,"byte_end":99516,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ unsafe impl TransparentWrapper<SomeStruct> for MyWrapper {}","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":99517,"byte_end":99580,"line_start":58,"line_end":58,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":99581,"byte_end":99584,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // interpret a reference to &SomeStruct as a &MyWrapper","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":99585,"byte_end":99644,"line_start":60,"line_end":60,"column_start":1,"column_end":60}},{"value":"/ let thing = SomeStruct::default();","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":99645,"byte_end":99683,"line_start":61,"line_end":61,"column_start":1,"column_end":39}},{"value":"/ let inner_ref: &MyWrapper = MyWrapper::wrap_ref(&thing);","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":99684,"byte_end":99744,"line_start":62,"line_end":62,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":99745,"byte_end":99748,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ // Works with &mut too.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":99749,"byte_end":99776,"line_start":64,"line_end":64,"column_start":1,"column_end":28}},{"value":"/ let mut mut_thing = SomeStruct::default();","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":99777,"byte_end":99823,"line_start":65,"line_end":65,"column_start":1,"column_end":47}},{"value":"/ let inner_mut: &mut MyWrapper = MyWrapper::wrap_mut(&mut mut_thing);","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":99824,"byte_end":99896,"line_start":66,"line_end":66,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":99897,"byte_end":99900,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ # let _ = (inner_ref, inner_mut); // silence warnings","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":99901,"byte_end":99958,"line_start":68,"line_end":68,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":99959,"byte_end":99966,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":99967,"byte_end":99970,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ ## Use with dynamically sized types","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":99971,"byte_end":100010,"line_start":71,"line_end":71,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":100011,"byte_end":100014,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":100015,"byte_end":100022,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":100023,"byte_end":100060,"line_start":74,"line_end":74,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":100061,"byte_end":100064,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":100065,"byte_end":100089,"line_start":76,"line_end":76,"column_start":1,"column_end":25}},{"value":"/ struct Slice<T>([T]);","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":100090,"byte_end":100115,"line_start":77,"line_end":77,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":100116,"byte_end":100119,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ unsafe impl<T> TransparentWrapper<[T]> for Slice<T> {}","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":100120,"byte_end":100178,"line_start":79,"line_end":79,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":100179,"byte_end":100182,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ let s = Slice::wrap_ref(&[1u32, 2, 3]);","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":100183,"byte_end":100226,"line_start":81,"line_end":81,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(&s.0, &[1, 2, 3]);","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":100227,"byte_end":100260,"line_start":82,"line_end":82,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":100261,"byte_end":100264,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [1, 2, 3u8];","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":100265,"byte_end":100295,"line_start":84,"line_end":84,"column_start":1,"column_end":31}},{"value":"/ let sm = Slice::wrap_mut(&mut buf);","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":100296,"byte_end":100335,"line_start":85,"line_end":85,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":100336,"byte_end":100343,"line_start":86,"line_end":86,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":100466,"byte_end":100470,"line_start":90,"line_end":90,"column_start":6,"column_end":10},"name":"wrap","qualname":"::transparent::TransparentWrapper::wrap","value":"pub fn wrap(Inner) -> Self where Self: Sized, Inner: Sized","parent":{"krate":0,"index":382},"children":[],"decl_id":null,"docs":" Convert the inner type into the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert the inner type into the wrapper type.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":100399,"byte_end":100448,"line_start":88,"line_end":88,"column_start":3,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":100451,"byte_end":100460,"line_start":89,"line_end":89,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":100782,"byte_end":100790,"line_start":103,"line_end":103,"column_start":6,"column_end":14},"name":"wrap_ref","qualname":"::transparent::TransparentWrapper::wrap_ref","value":"pub fn wrap_ref(&Inner) -> &Self","parent":{"krate":0,"index":382},"children":[],"decl_id":null,"docs":" Convert a reference to the inner type into a reference to the wrapper\n type.\n","sig":null,"attributes":[{"value":"/ Convert a reference to the inner type into a reference to the wrapper","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":100679,"byte_end":100752,"line_start":100,"line_end":100,"column_start":3,"column_end":76}},{"value":"/ type.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":100755,"byte_end":100764,"line_start":101,"line_end":101,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":100767,"byte_end":100776,"line_start":102,"line_end":102,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":101480,"byte_end":101488,"line_start":121,"line_end":121,"column_start":6,"column_end":14},"name":"wrap_mut","qualname":"::transparent::TransparentWrapper::wrap_mut","value":"pub fn wrap_mut(&mut Inner) -> &mut Self","parent":{"krate":0,"index":382},"children":[],"decl_id":null,"docs":" Convert a mutable reference to the inner type into a mutable reference to\n the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable reference to the inner type into a mutable reference to","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":101361,"byte_end":101438,"line_start":118,"line_end":118,"column_start":3,"column_end":80}},{"value":"/ the wrapper type.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":101441,"byte_end":101462,"line_start":119,"line_end":119,"column_start":3,"column_end":24}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":101465,"byte_end":101474,"line_start":120,"line_end":120,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":102152,"byte_end":102162,"line_start":138,"line_end":138,"column_start":6,"column_end":16},"name":"wrap_slice","qualname":"::transparent::TransparentWrapper::wrap_slice","value":"pub fn wrap_slice(&[Inner]) -> &[Self] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":382},"children":[],"decl_id":null,"docs":" Convert a slice to the inner type into a slice to the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a slice to the inner type into a slice to the wrapper type.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":102063,"byte_end":102134,"line_start":136,"line_end":136,"column_start":3,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":102137,"byte_end":102146,"line_start":137,"line_end":137,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":102706,"byte_end":102720,"line_start":155,"line_end":155,"column_start":6,"column_end":20},"name":"wrap_slice_mut","qualname":"::transparent::TransparentWrapper::wrap_slice_mut","value":"pub fn wrap_slice_mut(&mut [Inner]) -> &mut [Self] where Self: Sized,\nInner: Sized","parent":{"krate":0,"index":382},"children":[],"decl_id":null,"docs":" Convert a mutable slice to the inner type into a mutable slice to the\n wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable slice to the inner type into a mutable slice to the","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":102595,"byte_end":102668,"line_start":152,"line_end":152,"column_start":3,"column_end":76}},{"value":"/ wrapper type.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":102671,"byte_end":102688,"line_start":153,"line_end":153,"column_start":3,"column_end":20}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":102691,"byte_end":102700,"line_start":154,"line_end":154,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":103226,"byte_end":103230,"line_start":171,"line_end":171,"column_start":6,"column_end":10},"name":"peel","qualname":"::transparent::TransparentWrapper::peel","value":"pub fn peel(Self) -> Inner where Self: Sized, Inner: Sized","parent":{"krate":0,"index":382},"children":[],"decl_id":null,"docs":" Convert the wrapper type into the inner type.\n","sig":null,"attributes":[{"value":"/ Convert the wrapper type into the inner type.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":103159,"byte_end":103208,"line_start":169,"line_end":169,"column_start":3,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":103211,"byte_end":103220,"line_start":170,"line_end":170,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":103435,"byte_end":103443,"line_start":182,"line_end":182,"column_start":6,"column_end":14},"name":"peel_ref","qualname":"::transparent::TransparentWrapper::peel_ref","value":"pub fn peel_ref(&Self) -> &Inner","parent":{"krate":0,"index":382},"children":[],"decl_id":null,"docs":" Convert a reference to the wrapper type into a reference to the inner\n type.\n","sig":null,"attributes":[{"value":"/ Convert a reference to the wrapper type into a reference to the inner","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":103332,"byte_end":103405,"line_start":179,"line_end":179,"column_start":3,"column_end":76}},{"value":"/ type.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":103408,"byte_end":103417,"line_start":180,"line_end":180,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":103420,"byte_end":103429,"line_start":181,"line_end":181,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":104133,"byte_end":104141,"line_start":200,"line_end":200,"column_start":6,"column_end":14},"name":"peel_mut","qualname":"::transparent::TransparentWrapper::peel_mut","value":"pub fn peel_mut(&mut Self) -> &mut Inner","parent":{"krate":0,"index":382},"children":[],"decl_id":null,"docs":" Convert a mutable reference to the wrapper type into a mutable reference\n to the inner type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable reference to the wrapper type into a mutable reference","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":104014,"byte_end":104090,"line_start":197,"line_end":197,"column_start":3,"column_end":79}},{"value":"/ to the inner type.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":104093,"byte_end":104115,"line_start":198,"line_end":198,"column_start":3,"column_end":25}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":104118,"byte_end":104127,"line_start":199,"line_end":199,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":104805,"byte_end":104815,"line_start":217,"line_end":217,"column_start":6,"column_end":16},"name":"peel_slice","qualname":"::transparent::TransparentWrapper::peel_slice","value":"pub fn peel_slice(&[Self]) -> &[Inner] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":382},"children":[],"decl_id":null,"docs":" Convert a slice to the wrapped type into a slice to the inner type.\n","sig":null,"attributes":[{"value":"/ Convert a slice to the wrapped type into a slice to the inner type.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":104716,"byte_end":104787,"line_start":215,"line_end":215,"column_start":3,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":104790,"byte_end":104799,"line_start":216,"line_end":216,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":105360,"byte_end":105374,"line_start":234,"line_end":234,"column_start":6,"column_end":20},"name":"peel_slice_mut","qualname":"::transparent::TransparentWrapper::peel_slice_mut","value":"pub fn peel_slice_mut(&mut [Self]) -> &mut [Inner] where Self: Sized,\nInner: Sized","parent":{"krate":0,"index":382},"children":[],"decl_id":null,"docs":" Convert a mutable slice to the wrapped type into a mutable slice to the\n inner type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable slice to the wrapped type into a mutable slice to the","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":105249,"byte_end":105324,"line_start":231,"line_end":231,"column_start":3,"column_end":78}},{"value":"/ inner type.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":105327,"byte_end":105342,"line_start":232,"line_end":232,"column_start":3,"column_end":18}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":105345,"byte_end":105354,"line_start":233,"line_end":233,"column_start":3,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":803},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":3564,"byte_end":3604,"line_start":119,"line_end":119,"column_start":3,"column_end":43},"name":"TargetAlignmentGreaterAndInputNotAligned","qualname":"::PodCastError::TargetAlignmentGreaterAndInputNotAligned","value":"PodCastError::TargetAlignmentGreaterAndInputNotAligned","parent":{"krate":0,"index":802},"children":[],"decl_id":null,"docs":" You tried to cast a slice to an element type with a higher alignment\n requirement but the slice wasn't aligned.\n","sig":null,"attributes":[{"value":"/ You tried to cast a slice to an element type with a higher alignment","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":3441,"byte_end":3513,"line_start":117,"line_end":117,"column_start":3,"column_end":75}},{"value":"/ requirement but the slice wasn't aligned.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":3516,"byte_end":3561,"line_start":118,"line_end":118,"column_start":3,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":805},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":3790,"byte_end":3814,"line_start":123,"line_end":123,"column_start":3,"column_end":27},"name":"OutputSliceWouldHaveSlop","qualname":"::PodCastError::OutputSliceWouldHaveSlop","value":"PodCastError::OutputSliceWouldHaveSlop","parent":{"krate":0,"index":802},"children":[],"decl_id":null,"docs":" If the element size changes then the output slice changes length\n accordingly. If the output slice wouldn't be a whole number of elements\n then the conversion fails.\n","sig":null,"attributes":[{"value":"/ If the element size changes then the output slice changes length","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":3608,"byte_end":3676,"line_start":120,"line_end":120,"column_start":3,"column_end":71}},{"value":"/ accordingly. If the output slice wouldn't be a whole number of elements","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":3679,"byte_end":3754,"line_start":121,"line_end":121,"column_start":3,"column_end":78}},{"value":"/ then the conversion fails.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":3757,"byte_end":3787,"line_start":122,"line_end":122,"column_start":3,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":807},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":4035,"byte_end":4047,"line_start":127,"line_end":127,"column_start":3,"column_end":15},"name":"SizeMismatch","qualname":"::PodCastError::SizeMismatch","value":"PodCastError::SizeMismatch","parent":{"krate":0,"index":802},"children":[],"decl_id":null,"docs":" When casting a slice you can't convert between ZST elements and non-ZST\n elements. When casting an individual `T`, `&T`, or `&mut T` value the\n source size and destination size must be an exact match.\n","sig":null,"attributes":[{"value":"/ When casting a slice you can't convert between ZST elements and non-ZST","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":3818,"byte_end":3893,"line_start":124,"line_end":124,"column_start":3,"column_end":78}},{"value":"/ elements. When casting an individual `T`, `&T`, or `&mut T` value the","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":3896,"byte_end":3969,"line_start":125,"line_end":125,"column_start":3,"column_end":76}},{"value":"/ source size and destination size must be an exact match.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":3972,"byte_end":4032,"line_start":126,"line_end":126,"column_start":3,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":809},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":4338,"byte_end":4355,"line_start":134,"line_end":134,"column_start":3,"column_end":20},"name":"AlignmentMismatch","qualname":"::PodCastError::AlignmentMismatch","value":"PodCastError::AlignmentMismatch","parent":{"krate":0,"index":802},"children":[],"decl_id":null,"docs":" For this type of cast the alignments must be exactly the same and they\n were not so now you're sad.","sig":null,"attributes":[{"value":"/ For this type of cast the alignments must be exactly the same and they","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":4051,"byte_end":4125,"line_start":128,"line_end":128,"column_start":3,"column_end":77}},{"value":"/ were not so now you're sad.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":4128,"byte_end":4159,"line_start":129,"line_end":129,"column_start":3,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":4162,"byte_end":4165,"line_start":130,"line_end":130,"column_start":3,"column_end":6}},{"value":"/ This error is generated **only** by operations that cast allocated types","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":4168,"byte_end":4244,"line_start":131,"line_end":131,"column_start":3,"column_end":79}},{"value":"/ (such as `Box` and `Vec`), because in that case the alignment must stay","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":4247,"byte_end":4322,"line_start":132,"line_end":132,"column_start":3,"column_end":78}},{"value":"/ exact.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":4325,"byte_end":4335,"line_start":133,"line_end":133,"column_start":3,"column_end":13}}]},{"kind":"Enum","id":{"krate":0,"index":802},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":3424,"byte_end":3436,"line_start":116,"line_end":116,"column_start":10,"column_end":22},"name":"PodCastError","qualname":"::PodCastError","value":"pub enum PodCastError {\n    TargetAlignmentGreaterAndInputNotAligned,\n    OutputSliceWouldHaveSlop,\n    SizeMismatch,\n    AlignmentMismatch,\n}","parent":null,"children":[{"krate":0,"index":803},{"krate":0,"index":805},{"krate":0,"index":807},{"krate":0,"index":809}],"decl_id":null,"docs":" The things that can go wrong when casting between [`Pod`] data forms.\n","sig":null,"attributes":[{"value":"/ The things that can go wrong when casting between [`Pod`] data forms.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":3290,"byte_end":3363,"line_start":114,"line_end":114,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":399},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":4830,"byte_end":4838,"line_start":150,"line_end":150,"column_start":8,"column_end":16},"name":"bytes_of","qualname":"::bytes_of","value":"pub fn bytes_of<T: NoUninit>(&T) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&T` as `&[u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&T` as `&[u8]`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":4621,"byte_end":4655,"line_start":145,"line_end":145,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":4656,"byte_end":4659,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":4660,"byte_end":4738,"line_start":147,"line_end":147,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":4739,"byte_end":4812,"line_start":148,"line_end":148,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":4813,"byte_end":4822,"line_start":149,"line_end":149,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":401},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":5125,"byte_end":5137,"line_start":159,"line_end":159,"column_start":8,"column_end":20},"name":"bytes_of_mut","qualname":"::bytes_of_mut","value":"pub fn bytes_of_mut<T: NoUninit + AnyBitPattern>(&mut T) -> &mut [u8]","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut T` as `&mut [u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut T` as `&mut [u8]`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":4908,"byte_end":4950,"line_start":154,"line_end":154,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":4951,"byte_end":4954,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":4955,"byte_end":5033,"line_start":156,"line_end":156,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":5034,"byte_end":5107,"line_start":157,"line_end":157,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":5108,"byte_end":5117,"line_start":158,"line_end":158,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":403},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":5365,"byte_end":5375,"line_start":169,"line_end":169,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::from_bytes","value":"pub fn from_bytes<T: AnyBitPattern>(&[u8]) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":5235,"byte_end":5269,"line_start":163,"line_end":163,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":5270,"byte_end":5273,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":5274,"byte_end":5287,"line_start":165,"line_end":165,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":5288,"byte_end":5291,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes`] but will panic on error.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":5292,"byte_end":5347,"line_start":167,"line_end":167,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":5348,"byte_end":5357,"line_start":168,"line_end":168,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":405},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":5594,"byte_end":5608,"line_start":179,"line_end":179,"column_start":8,"column_end":22},"name":"from_bytes_mut","qualname":"::from_bytes_mut","value":"pub fn from_bytes_mut<T: NoUninit + AnyBitPattern>(&mut [u8]) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":5452,"byte_end":5494,"line_start":173,"line_end":173,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":5495,"byte_end":5498,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":5499,"byte_end":5512,"line_start":175,"line_end":175,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":5513,"byte_end":5516,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes_mut`] but will panic on error.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":5517,"byte_end":5576,"line_start":177,"line_end":177,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":5577,"byte_end":5586,"line_start":178,"line_end":178,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":407},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":5854,"byte_end":5876,"line_start":188,"line_end":188,"column_start":8,"column_end":30},"name":"try_pod_read_unaligned","qualname":"::try_pod_read_unaligned","value":"pub fn try_pod_read_unaligned<T: AnyBitPattern>(&[u8])\n-> Result<T, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Reads from the bytes as if they were a `T`.","sig":null,"attributes":[{"value":"/ Reads from the bytes as if they were a `T`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":5708,"byte_end":5755,"line_start":183,"line_end":183,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":5756,"byte_end":5759,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":5760,"byte_end":5774,"line_start":185,"line_end":185,"column_start":1,"column_end":15}},{"value":"/ * If the `bytes` length is not equal to `size_of::<T>()`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":5775,"byte_end":5836,"line_start":186,"line_end":186,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":5837,"byte_end":5846,"line_start":187,"line_end":187,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":409},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":6138,"byte_end":6156,"line_start":197,"line_end":197,"column_start":8,"column_end":26},"name":"pod_read_unaligned","qualname":"::pod_read_unaligned","value":"pub fn pod_read_unaligned<T: AnyBitPattern>(&[u8]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Reads the slice into a `T` value.","sig":null,"attributes":[{"value":"/ Reads the slice into a `T` value.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":5994,"byte_end":6031,"line_start":192,"line_end":192,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":6032,"byte_end":6035,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":6036,"byte_end":6049,"line_start":194,"line_end":194,"column_start":1,"column_end":14}},{"value":"/ * This is like `try_pod_read_unaligned` but will panic on failure.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":6050,"byte_end":6120,"line_start":195,"line_end":195,"column_start":1,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":6121,"byte_end":6130,"line_start":196,"line_end":196,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":411},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":6442,"byte_end":6456,"line_start":208,"line_end":208,"column_start":8,"column_end":22},"name":"try_from_bytes","qualname":"::try_from_bytes","value":"pub fn try_from_bytes<T: AnyBitPattern>(&[u8]) -> Result<&T, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":6248,"byte_end":6282,"line_start":201,"line_end":201,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":6283,"byte_end":6286,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":6287,"byte_end":6301,"line_start":203,"line_end":203,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":6302,"byte_end":6305,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":6306,"byte_end":6355,"line_start":205,"line_end":205,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":6356,"byte_end":6424,"line_start":206,"line_end":206,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":6425,"byte_end":6434,"line_start":207,"line_end":207,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":413},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":6761,"byte_end":6779,"line_start":219,"line_end":219,"column_start":8,"column_end":26},"name":"try_from_bytes_mut","qualname":"::try_from_bytes_mut","value":"pub fn try_from_bytes_mut<T: NoUninit + AnyBitPattern>(&mut [u8])\n-> Result<&mut T, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":6559,"byte_end":6601,"line_start":212,"line_end":212,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":6602,"byte_end":6605,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":6606,"byte_end":6620,"line_start":214,"line_end":214,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":6621,"byte_end":6624,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":6625,"byte_end":6674,"line_start":216,"line_end":216,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":6675,"byte_end":6743,"line_start":217,"line_end":217,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":6744,"byte_end":6753,"line_start":218,"line_end":218,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":415},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":7049,"byte_end":7053,"line_start":231,"line_end":231,"column_start":8,"column_end":12},"name":"cast","qualname":"::cast","value":"pub fn cast<A: NoUninit, B: AnyBitPattern>(A) -> B","parent":null,"children":[],"decl_id":null,"docs":" Cast `T` into `U`","sig":null,"attributes":[{"value":"/ Cast `T` into `U`","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":6910,"byte_end":6931,"line_start":225,"line_end":225,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":6932,"byte_end":6935,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":6936,"byte_end":6949,"line_start":227,"line_end":227,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":6950,"byte_end":6953,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"/ * This is like [`try_cast`](try_cast), but will panic on a size mismatch.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":6954,"byte_end":7031,"line_start":229,"line_end":229,"column_start":1,"column_end":78}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":7032,"byte_end":7041,"line_start":230,"line_end":230,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":418},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":7258,"byte_end":7266,"line_start":241,"line_end":241,"column_start":8,"column_end":16},"name":"cast_mut","qualname":"::cast_mut","value":"pub fn cast_mut<A: NoUninit + AnyBitPattern, B: NoUninit +\n                AnyBitPattern>(&mut A) -> &mut B","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Cast `&mut T` into `&mut U`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":7132,"byte_end":7164,"line_start":235,"line_end":235,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":7165,"byte_end":7168,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":7169,"byte_end":7182,"line_start":237,"line_end":237,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":7183,"byte_end":7186,"line_start":238,"line_end":238,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_mut`] but will panic on error.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":7187,"byte_end":7240,"line_start":239,"line_end":239,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":7241,"byte_end":7250,"line_start":240,"line_end":240,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":421},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":7504,"byte_end":7512,"line_start":251,"line_end":251,"column_start":8,"column_end":16},"name":"cast_ref","qualname":"::cast_ref","value":"pub fn cast_ref<A: NoUninit, B: AnyBitPattern>(&A) -> &B","parent":null,"children":[],"decl_id":null,"docs":" Cast `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Cast `&T` into `&U`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":7386,"byte_end":7410,"line_start":245,"line_end":245,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":7411,"byte_end":7414,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":7415,"byte_end":7428,"line_start":247,"line_end":247,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":7429,"byte_end":7432,"line_start":248,"line_end":248,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_ref`] but will panic on error.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":7433,"byte_end":7486,"line_start":249,"line_end":249,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":7487,"byte_end":7496,"line_start":250,"line_end":250,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":424},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":7721,"byte_end":7731,"line_start":261,"line_end":261,"column_start":8,"column_end":18},"name":"cast_slice","qualname":"::cast_slice","value":"pub fn cast_slice<A: NoUninit, B: AnyBitPattern>(&[A]) -> &[B]","parent":null,"children":[],"decl_id":null,"docs":" Cast `&[A]` into `&[B]`.","sig":null,"attributes":[{"value":"/ Cast `&[A]` into `&[B]`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":7597,"byte_end":7625,"line_start":255,"line_end":255,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":7626,"byte_end":7629,"line_start":256,"line_end":256,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":7630,"byte_end":7643,"line_start":257,"line_end":257,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":7644,"byte_end":7647,"line_start":258,"line_end":258,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice`] but will panic on error.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":7648,"byte_end":7703,"line_start":259,"line_end":259,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":7704,"byte_end":7713,"line_start":260,"line_end":260,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":427},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":7958,"byte_end":7972,"line_start":271,"line_end":271,"column_start":8,"column_end":22},"name":"cast_slice_mut","qualname":"::cast_slice_mut","value":"pub fn cast_slice_mut<A: NoUninit + AnyBitPattern, B: NoUninit +\n                      AnyBitPattern>(&mut [A]) -> &mut [B]","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut [T]` into `&mut [U]`.","sig":null,"attributes":[{"value":"/ Cast `&mut [T]` into `&mut [U]`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":7822,"byte_end":7858,"line_start":265,"line_end":265,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":7859,"byte_end":7862,"line_start":266,"line_end":266,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":7863,"byte_end":7876,"line_start":267,"line_end":267,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":7877,"byte_end":7880,"line_start":268,"line_end":268,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice_mut`] but will panic on error.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":7881,"byte_end":7940,"line_start":269,"line_end":269,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":7941,"byte_end":7950,"line_start":270,"line_end":270,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":430},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":8177,"byte_end":8189,"line_start":277,"line_end":277,"column_start":8,"column_end":20},"name":"pod_align_to","qualname":"::pod_align_to","value":"pub fn pod_align_to<T: NoUninit, U: AnyBitPattern>(&[T]) -> (&[T], &[U], &[T])","parent":null,"children":[],"decl_id":null,"docs":" As `align_to`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to`, but safe because of the [`Pod`] bound.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":8102,"byte_end":8159,"line_start":275,"line_end":275,"column_start":1,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":8160,"byte_end":8169,"line_start":276,"line_end":276,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":433},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":8373,"byte_end":8389,"line_start":283,"line_end":283,"column_start":8,"column_end":24},"name":"pod_align_to_mut","qualname":"::pod_align_to_mut","value":"pub fn pod_align_to_mut<T: NoUninit + AnyBitPattern, U: NoUninit +\n                        AnyBitPattern>(&mut [T])\n-> (&mut [T], &mut [U], &mut [T])","parent":null,"children":[],"decl_id":null,"docs":" As `align_to_mut`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to_mut`, but safe because of the [`Pod`] bound.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":8294,"byte_end":8355,"line_start":281,"line_end":281,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":8356,"byte_end":8365,"line_start":282,"line_end":282,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":436},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":8933,"byte_end":8941,"line_start":300,"line_end":300,"column_start":8,"column_end":16},"name":"try_cast","qualname":"::try_cast","value":"pub fn try_cast<A: NoUninit, B: AnyBitPattern>(A) -> Result<B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to cast `T` into `U`.","sig":null,"attributes":[{"value":"/ Try to cast `T` into `U`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":8546,"byte_end":8575,"line_start":289,"line_end":289,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":8576,"byte_end":8579,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ Note that for this particular type of cast, alignment isn't a factor. The","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":8580,"byte_end":8657,"line_start":291,"line_end":291,"column_start":1,"column_end":78}},{"value":"/ input value is semantically copied into the function and then returned to a","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":8658,"byte_end":8737,"line_start":292,"line_end":292,"column_start":1,"column_end":80}},{"value":"/ new memory location which will have whatever the required alignment of the","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":8738,"byte_end":8816,"line_start":293,"line_end":293,"column_start":1,"column_end":79}},{"value":"/ output type is.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":8817,"byte_end":8836,"line_start":294,"line_end":294,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":8837,"byte_end":8840,"line_start":295,"line_end":295,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":8841,"byte_end":8855,"line_start":296,"line_end":296,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":8856,"byte_end":8859,"line_start":297,"line_end":297,"column_start":1,"column_end":4}},{"value":"/ * If the types don't have the same size this fails.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":8860,"byte_end":8915,"line_start":298,"line_end":298,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":8916,"byte_end":8925,"line_start":299,"line_end":299,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":439},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":9239,"byte_end":9251,"line_start":311,"line_end":311,"column_start":8,"column_end":20},"name":"try_cast_ref","qualname":"::try_cast_ref","value":"pub fn try_cast_ref<A: NoUninit, B: AnyBitPattern>(&A)\n-> Result<&B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&T` into `&U`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":9046,"byte_end":9082,"line_start":304,"line_end":304,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":9083,"byte_end":9086,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":9087,"byte_end":9101,"line_start":306,"line_end":306,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":9102,"byte_end":9105,"line_start":307,"line_end":307,"column_start":1,"column_end":4}},{"value":"/ * If the reference isn't aligned in the new type","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":9106,"byte_end":9158,"line_start":308,"line_end":308,"column_start":1,"column_end":53}},{"value":"/ * If the source type and target type aren't the same size.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":9159,"byte_end":9221,"line_start":309,"line_end":309,"column_start":1,"column_end":63}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":9222,"byte_end":9231,"line_start":310,"line_end":310,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":442},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":9464,"byte_end":9476,"line_start":319,"line_end":319,"column_start":8,"column_end":20},"name":"try_cast_mut","qualname":"::try_cast_mut","value":"pub fn try_cast_mut<A: NoUninit + AnyBitPattern, B: NoUninit +\n                    AnyBitPattern>(&mut A) -> Result<&mut B, PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&mut T` into `&mut U`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":9362,"byte_end":9406,"line_start":315,"line_end":315,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":9407,"byte_end":9410,"line_start":316,"line_end":316,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_ref`], but `mut`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":9411,"byte_end":9446,"line_start":317,"line_end":317,"column_start":1,"column_end":36}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":9447,"byte_end":9456,"line_start":318,"line_end":318,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":445},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":10380,"byte_end":10394,"line_start":339,"line_end":339,"column_start":8,"column_end":22},"name":"try_cast_slice","qualname":"::try_cast_slice","value":"pub fn try_cast_slice<A: NoUninit, B: AnyBitPattern>(&[A])\n-> Result<&[B], PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&[A]` into `&[B]` (possibly with a change in length).","sig":null,"attributes":[{"value":"/ Try to convert `&[A]` into `&[B]` (possibly with a change in length).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":9622,"byte_end":9695,"line_start":323,"line_end":323,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":9696,"byte_end":9699,"line_start":324,"line_end":324,"column_start":1,"column_end":4}},{"value":"/ * `input.as_ptr() as usize == output.as_ptr() as usize`","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":9700,"byte_end":9759,"line_start":325,"line_end":325,"column_start":1,"column_end":60}},{"value":"/ * `input.len() * size_of::<A>() == output.len() * size_of::<B>()`","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":9760,"byte_end":9829,"line_start":326,"line_end":326,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":9830,"byte_end":9833,"line_start":327,"line_end":327,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":9834,"byte_end":9848,"line_start":328,"line_end":328,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":9849,"byte_end":9852,"line_start":329,"line_end":329,"column_start":1,"column_end":4}},{"value":"/ * If the target type has a greater alignment requirement and the input slice","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":9853,"byte_end":9933,"line_start":330,"line_end":330,"column_start":1,"column_end":81}},{"value":"/   isn't aligned.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":9934,"byte_end":9954,"line_start":331,"line_end":331,"column_start":1,"column_end":21}},{"value":"/ * If the target element type is a different size from the current element","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":9955,"byte_end":10032,"line_start":332,"line_end":332,"column_start":1,"column_end":78}},{"value":"/   type, and the output slice wouldn't be a whole number of elements when","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":10033,"byte_end":10109,"line_start":333,"line_end":333,"column_start":1,"column_end":77}},{"value":"/   accounting for the size change (eg: 3 `u16` values is 1.5 `u32` values, so","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":10110,"byte_end":10190,"line_start":334,"line_end":334,"column_start":1,"column_end":81}},{"value":"/   that's a failure).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":10191,"byte_end":10215,"line_start":335,"line_end":335,"column_start":1,"column_end":25}},{"value":"/ * Similarly, you can't convert between a [ZST](https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts)","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":10216,"byte_end":10341,"line_start":336,"line_end":336,"column_start":1,"column_end":126}},{"value":"/   and a non-ZST.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":10342,"byte_end":10362,"line_start":337,"line_end":337,"column_start":1,"column_end":21}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":10363,"byte_end":10372,"line_start":338,"line_end":338,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":448},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":10657,"byte_end":10675,"line_start":348,"line_end":348,"column_start":8,"column_end":26},"name":"try_cast_slice_mut","qualname":"::try_cast_slice_mut","value":"pub fn try_cast_slice_mut<A: NoUninit + AnyBitPattern, B: NoUninit +\n                          AnyBitPattern>(&mut [A])\n-> Result<&mut [B], PodCastError>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in\n length).","sig":null,"attributes":[{"value":"/ Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":10511,"byte_end":10583,"line_start":343,"line_end":343,"column_start":1,"column_end":73}},{"value":"/ length).","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":10584,"byte_end":10596,"line_start":344,"line_end":344,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":10597,"byte_end":10600,"line_start":345,"line_end":345,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_slice`], but `&mut`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":10601,"byte_end":10639,"line_start":346,"line_end":346,"column_start":1,"column_end":39}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":10640,"byte_end":10649,"line_start":347,"line_end":347,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":21505,"byte_end":21506,"line_start":43,"line_end":43,"column_start":39,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":26864,"byte_end":26865,"line_start":132,"line_end":132,"column_start":53,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":27935,"byte_end":27951,"line_start":175,"line_end":175,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":28177,"byte_end":28193,"line_start":183,"line_end":183,"column_start":36,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50100,"byte_end":50108,"line_start":43,"line_end":43,"column_start":39,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50141,"byte_end":50147,"line_start":45,"line_end":45,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50187,"byte_end":50193,"line_start":46,"line_end":46,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50234,"byte_end":50240,"line_start":47,"line_end":47,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50281,"byte_end":50287,"line_start":48,"line_end":48,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50328,"byte_end":50334,"line_start":49,"line_end":49,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50376,"byte_end":50382,"line_start":50,"line_end":50,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50425,"byte_end":50431,"line_start":51,"line_end":51,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50471,"byte_end":50477,"line_start":52,"line_end":52,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50518,"byte_end":50524,"line_start":53,"line_end":53,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50565,"byte_end":50571,"line_start":54,"line_end":54,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50612,"byte_end":50618,"line_start":55,"line_end":55,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50660,"byte_end":50666,"line_start":56,"line_end":56,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50791,"byte_end":50797,"line_start":60,"line_end":60,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50851,"byte_end":50862,"line_start":61,"line_end":61,"column_start":39,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50894,"byte_end":50907,"line_start":62,"line_end":62,"column_start":26,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50949,"byte_end":50961,"line_start":63,"line_end":63,"column_start":39,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":64611,"byte_end":64618,"line_start":349,"line_end":349,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":64686,"byte_end":64692,"line_start":351,"line_end":351,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":64760,"byte_end":64767,"line_start":353,"line_end":353,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":64835,"byte_end":64842,"line_start":355,"line_end":355,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":64910,"byte_end":64916,"line_start":357,"line_end":357,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":64984,"byte_end":64991,"line_start":359,"line_end":359,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":67378,"byte_end":67386,"line_start":46,"line_end":46,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":67414,"byte_end":67420,"line_start":48,"line_end":48,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":67455,"byte_end":67461,"line_start":49,"line_end":49,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":67497,"byte_end":67503,"line_start":50,"line_end":50,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":67539,"byte_end":67545,"line_start":51,"line_end":51,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":67581,"byte_end":67587,"line_start":52,"line_end":52,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":67624,"byte_end":67630,"line_start":53,"line_end":53,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":67668,"byte_end":67674,"line_start":54,"line_end":54,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":67709,"byte_end":67715,"line_start":55,"line_end":55,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":67751,"byte_end":67757,"line_start":56,"line_end":56,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":67793,"byte_end":67799,"line_start":57,"line_end":57,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":67835,"byte_end":67841,"line_start":58,"line_end":58,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":67878,"byte_end":67884,"line_start":59,"line_end":59,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":68195,"byte_end":68206,"line_start":68,"line_end":68,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":68233,"byte_end":68246,"line_start":69,"line_end":69,"column_start":21,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":68278,"byte_end":68290,"line_start":70,"line_end":70,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":80397,"byte_end":80404,"line_start":310,"line_end":310,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":80467,"byte_end":80473,"line_start":312,"line_end":312,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":80536,"byte_end":80543,"line_start":314,"line_end":314,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":80606,"byte_end":80613,"line_start":316,"line_end":316,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":80676,"byte_end":80682,"line_start":318,"line_end":318,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":80745,"byte_end":80752,"line_start":320,"line_end":320,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":83869,"byte_end":83870,"line_start":48,"line_end":48,"column_start":34,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":105866,"byte_end":105874,"line_start":249,"line_end":249,"column_start":53,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":4422,"byte_end":4434,"line_start":137,"line_end":137,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":2729,"byte_end":2739,"line_start":79,"line_end":79,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":18}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":2858,"byte_end":2865,"line_start":86,"line_end":86,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":82}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":21429,"byte_end":21437,"line_start":41,"line_end":41,"column_start":33,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":218},"to":{"krate":0,"index":78}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":21440,"byte_end":21445,"line_start":41,"line_end":41,"column_start":44,"column_end":49},"kind":"SuperTrait","from":{"krate":1,"index":3009},"to":{"krate":0,"index":78}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":21448,"byte_end":21452,"line_start":41,"line_end":41,"column_start":52,"column_end":56},"kind":"SuperTrait","from":{"krate":1,"index":3014},"to":{"krate":0,"index":78}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\anybitpattern.rs","byte_start":21505,"byte_end":21506,"line_start":43,"line_end":43,"column_start":39,"column_end":40},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":80},"to":{"krate":0,"index":78}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":26385,"byte_end":26389,"line_start":121,"line_end":121,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":3014},"to":{"krate":0,"index":97}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":26864,"byte_end":26865,"line_start":132,"line_end":132,"column_start":53,"column_end":54},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":101},"to":{"krate":0,"index":97}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":27935,"byte_end":27951,"line_start":175,"line_end":175,"column_start":29,"column_end":45},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":453},"to":{"krate":1,"index":9357}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\checked.rs","byte_start":28177,"byte_end":28193,"line_start":183,"line_end":183,"column_start":36,"column_end":52},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":453},"to":{"krate":1,"index":2910}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":49175,"byte_end":49180,"line_start":15,"line_end":15,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":3009},"to":{"krate":0,"index":218}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50100,"byte_end":50108,"line_start":43,"line_end":43,"column_start":39,"column_end":47},"kind":{"Impl":{"id":22}},"from":{"krate":1,"index":24842},"to":{"krate":0,"index":218}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50141,"byte_end":50147,"line_start":45,"line_end":45,"column_start":26,"column_end":32},"kind":{"Impl":{"id":23}},"from":{"krate":1,"index":43359},"to":{"krate":0,"index":218}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50187,"byte_end":50193,"line_start":46,"line_end":46,"column_start":26,"column_end":32},"kind":{"Impl":{"id":24}},"from":{"krate":1,"index":43359},"to":{"krate":0,"index":218}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50234,"byte_end":50240,"line_start":47,"line_end":47,"column_start":26,"column_end":32},"kind":{"Impl":{"id":25}},"from":{"krate":1,"index":43359},"to":{"krate":0,"index":218}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50281,"byte_end":50287,"line_start":48,"line_end":48,"column_start":26,"column_end":32},"kind":{"Impl":{"id":26}},"from":{"krate":1,"index":43359},"to":{"krate":0,"index":218}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50328,"byte_end":50334,"line_start":49,"line_end":49,"column_start":26,"column_end":32},"kind":{"Impl":{"id":27}},"from":{"krate":1,"index":43359},"to":{"krate":0,"index":218}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50376,"byte_end":50382,"line_start":50,"line_end":50,"column_start":26,"column_end":32},"kind":{"Impl":{"id":28}},"from":{"krate":1,"index":43359},"to":{"krate":0,"index":218}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50425,"byte_end":50431,"line_start":51,"line_end":51,"column_start":26,"column_end":32},"kind":{"Impl":{"id":29}},"from":{"krate":1,"index":43359},"to":{"krate":0,"index":218}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50471,"byte_end":50477,"line_start":52,"line_end":52,"column_start":26,"column_end":32},"kind":{"Impl":{"id":30}},"from":{"krate":1,"index":43359},"to":{"krate":0,"index":218}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50518,"byte_end":50524,"line_start":53,"line_end":53,"column_start":26,"column_end":32},"kind":{"Impl":{"id":31}},"from":{"krate":1,"index":43359},"to":{"krate":0,"index":218}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50565,"byte_end":50571,"line_start":54,"line_end":54,"column_start":26,"column_end":32},"kind":{"Impl":{"id":32}},"from":{"krate":1,"index":43359},"to":{"krate":0,"index":218}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50612,"byte_end":50618,"line_start":55,"line_end":55,"column_start":26,"column_end":32},"kind":{"Impl":{"id":33}},"from":{"krate":1,"index":43359},"to":{"krate":0,"index":218}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50660,"byte_end":50666,"line_start":56,"line_end":56,"column_start":26,"column_end":32},"kind":{"Impl":{"id":34}},"from":{"krate":1,"index":43359},"to":{"krate":0,"index":218}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50791,"byte_end":50797,"line_start":60,"line_end":60,"column_start":29,"column_end":35},"kind":{"Impl":{"id":35}},"from":{"krate":1,"index":43359},"to":{"krate":0,"index":218}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50851,"byte_end":50862,"line_start":61,"line_end":61,"column_start":39,"column_end":50},"kind":{"Impl":{"id":36}},"from":{"krate":1,"index":3022},"to":{"krate":0,"index":218}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50894,"byte_end":50907,"line_start":62,"line_end":62,"column_start":26,"column_end":39},"kind":{"Impl":{"id":37}},"from":{"krate":1,"index":34913},"to":{"krate":0,"index":218}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":50949,"byte_end":50961,"line_start":63,"line_end":63,"column_start":39,"column_end":51},"kind":{"Impl":{"id":38}},"from":{"krate":1,"index":28727},"to":{"krate":0,"index":218}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":64611,"byte_end":64618,"line_start":349,"line_end":349,"column_start":34,"column_end":41},"kind":{"Impl":{"id":39}},"from":{"krate":1,"index":49078},"to":{"krate":0,"index":218}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":64686,"byte_end":64692,"line_start":351,"line_end":351,"column_start":34,"column_end":40},"kind":{"Impl":{"id":40}},"from":{"krate":1,"index":49087},"to":{"krate":0,"index":218}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":64760,"byte_end":64767,"line_start":353,"line_end":353,"column_start":34,"column_end":41},"kind":{"Impl":{"id":41}},"from":{"krate":1,"index":49098},"to":{"krate":0,"index":218}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":64835,"byte_end":64842,"line_start":355,"line_end":355,"column_start":34,"column_end":41},"kind":{"Impl":{"id":42}},"from":{"krate":1,"index":49107},"to":{"krate":0,"index":218}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":64910,"byte_end":64916,"line_start":357,"line_end":357,"column_start":34,"column_end":40},"kind":{"Impl":{"id":43}},"from":{"krate":1,"index":49118},"to":{"krate":0,"index":218}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\zeroable.rs","byte_start":64984,"byte_end":64991,"line_start":359,"line_end":359,"column_start":34,"column_end":41},"kind":{"Impl":{"id":44}},"from":{"krate":1,"index":49133},"to":{"krate":0,"index":218}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":66912,"byte_end":66920,"line_start":29,"line_end":29,"column_start":23,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":218},"to":{"krate":0,"index":315}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":66923,"byte_end":66927,"line_start":29,"line_end":29,"column_start":34,"column_end":38},"kind":"SuperTrait","from":{"krate":1,"index":3014},"to":{"krate":0,"index":315}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":67378,"byte_end":67386,"line_start":46,"line_end":46,"column_start":29,"column_end":37},"kind":{"Impl":{"id":59}},"from":{"krate":1,"index":24842},"to":{"krate":0,"index":315}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":67414,"byte_end":67420,"line_start":48,"line_end":48,"column_start":21,"column_end":27},"kind":{"Impl":{"id":60}},"from":{"krate":1,"index":43359},"to":{"krate":0,"index":315}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":67455,"byte_end":67461,"line_start":49,"line_end":49,"column_start":21,"column_end":27},"kind":{"Impl":{"id":61}},"from":{"krate":1,"index":43359},"to":{"krate":0,"index":315}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":67497,"byte_end":67503,"line_start":50,"line_end":50,"column_start":21,"column_end":27},"kind":{"Impl":{"id":62}},"from":{"krate":1,"index":43359},"to":{"krate":0,"index":315}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":67539,"byte_end":67545,"line_start":51,"line_end":51,"column_start":21,"column_end":27},"kind":{"Impl":{"id":63}},"from":{"krate":1,"index":43359},"to":{"krate":0,"index":315}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":67581,"byte_end":67587,"line_start":52,"line_end":52,"column_start":21,"column_end":27},"kind":{"Impl":{"id":64}},"from":{"krate":1,"index":43359},"to":{"krate":0,"index":315}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":67624,"byte_end":67630,"line_start":53,"line_end":53,"column_start":21,"column_end":27},"kind":{"Impl":{"id":65}},"from":{"krate":1,"index":43359},"to":{"krate":0,"index":315}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":67668,"byte_end":67674,"line_start":54,"line_end":54,"column_start":21,"column_end":27},"kind":{"Impl":{"id":66}},"from":{"krate":1,"index":43359},"to":{"krate":0,"index":315}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":67709,"byte_end":67715,"line_start":55,"line_end":55,"column_start":21,"column_end":27},"kind":{"Impl":{"id":67}},"from":{"krate":1,"index":43359},"to":{"krate":0,"index":315}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":67751,"byte_end":67757,"line_start":56,"line_end":56,"column_start":21,"column_end":27},"kind":{"Impl":{"id":68}},"from":{"krate":1,"index":43359},"to":{"krate":0,"index":315}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":67793,"byte_end":67799,"line_start":57,"line_end":57,"column_start":21,"column_end":27},"kind":{"Impl":{"id":69}},"from":{"krate":1,"index":43359},"to":{"krate":0,"index":315}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":67835,"byte_end":67841,"line_start":58,"line_end":58,"column_start":21,"column_end":27},"kind":{"Impl":{"id":70}},"from":{"krate":1,"index":43359},"to":{"krate":0,"index":315}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":67878,"byte_end":67884,"line_start":59,"line_end":59,"column_start":21,"column_end":27},"kind":{"Impl":{"id":71}},"from":{"krate":1,"index":43359},"to":{"krate":0,"index":315}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":68195,"byte_end":68206,"line_start":68,"line_end":68,"column_start":29,"column_end":40},"kind":{"Impl":{"id":72}},"from":{"krate":1,"index":3022},"to":{"krate":0,"index":315}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":68233,"byte_end":68246,"line_start":69,"line_end":69,"column_start":21,"column_end":34},"kind":{"Impl":{"id":73}},"from":{"krate":1,"index":34913},"to":{"krate":0,"index":315}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":68278,"byte_end":68290,"line_start":70,"line_end":70,"column_start":29,"column_end":41},"kind":{"Impl":{"id":74}},"from":{"krate":1,"index":28727},"to":{"krate":0,"index":315}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":80397,"byte_end":80404,"line_start":310,"line_end":310,"column_start":29,"column_end":36},"kind":{"Impl":{"id":75}},"from":{"krate":1,"index":49078},"to":{"krate":0,"index":315}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":80467,"byte_end":80473,"line_start":312,"line_end":312,"column_start":29,"column_end":35},"kind":{"Impl":{"id":76}},"from":{"krate":1,"index":49087},"to":{"krate":0,"index":315}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":80536,"byte_end":80543,"line_start":314,"line_end":314,"column_start":29,"column_end":36},"kind":{"Impl":{"id":77}},"from":{"krate":1,"index":49098},"to":{"krate":0,"index":315}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":80606,"byte_end":80613,"line_start":316,"line_end":316,"column_start":29,"column_end":36},"kind":{"Impl":{"id":78}},"from":{"krate":1,"index":49107},"to":{"krate":0,"index":315}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":80676,"byte_end":80682,"line_start":318,"line_end":318,"column_start":29,"column_end":35},"kind":{"Impl":{"id":79}},"from":{"krate":1,"index":49118},"to":{"krate":0,"index":315}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\pod.rs","byte_start":80745,"byte_end":80752,"line_start":320,"line_end":320,"column_start":29,"column_end":36},"kind":{"Impl":{"id":80}},"from":{"krate":1,"index":49133},"to":{"krate":0,"index":315}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":83809,"byte_end":83814,"line_start":46,"line_end":46,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":3009},"to":{"krate":0,"index":361}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":83817,"byte_end":83821,"line_start":46,"line_end":46,"column_start":36,"column_end":40},"kind":"SuperTrait","from":{"krate":1,"index":3014},"to":{"krate":0,"index":361}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\no_uninit.rs","byte_start":83869,"byte_end":83870,"line_start":48,"line_end":48,"column_start":34,"column_end":35},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":363},"to":{"krate":0,"index":361}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\contiguous.rs","byte_start":86990,"byte_end":86994,"line_start":78,"line_end":78,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":3014},"to":{"krate":0,"index":369}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\transparent.rs","byte_start":105866,"byte_end":105874,"line_start":249,"line_end":249,"column_start":53,"column_end":61},"kind":{"Impl":{"id":103}},"from":{"krate":1,"index":24842},"to":{"krate":0,"index":382}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\bytemuck-1.9.1\\src\\lib.rs","byte_start":4422,"byte_end":4434,"line_start":137,"line_end":137,"column_start":29,"column_end":41},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":802},"to":{"krate":1,"index":9357}}]}